
MC_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  000034a2  00003536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800186  00800186  0000365c  2**0
                  ALLOC
  3 .stab         00002838  00000000  00000000  0000365c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001674  00000000  00000000  00005e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00007508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d0  00000000  00000000  00007688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000258f  00000000  00000000  00007858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011c4  00000000  00000000  00009de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d8  00000000  00000000  0000afab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c084  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000336  00000000  00000000  0000c224  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000173a  00000000  00000000  0000c55a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0000dc94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__vector_3>
      10:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__vector_8>
      24:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 0c 	call	0x192e	; 0x192e <main>
      8a:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 3d 0a 	call	0x147a	; 0x147a <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 b5 08 	call	0x116a	; 0x116a <__subsf3>
     1bc:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x56f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__stack+0x8f>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	88 59       	subi	r24, 0x98	; 152
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__stack+0x73>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__stack+0x73>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__stack+0x73>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0xa2d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__stack+0xb5>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__stack+0xe9>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__stack+0xdf>
     532:	28 f0       	brcs	.+10     	; 0x53e <__stack+0xdf>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__stack+0x10d>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__stack+0x10d>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__stack+0x105>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__stack+0x10d>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__stack+0x11d>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__stack+0x115>
     580:	88 59       	subi	r24, 0x98	; 152
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__stack+0x167>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__stack+0x3a3>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__stack+0x179>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__stack+0x171>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__stack+0x191>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__stack+0x189>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__stack+0x1a9>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__stack+0x1a1>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__stack+0x1c1>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__stack+0x1b9>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__stack+0x2b9>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__stack+0x2b9>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__stack+0x2b9>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__stack+0x35d>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__stack+0x35d>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__stack+0x35d>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__stack+0x375>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__stack+0x36d>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x49f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x49f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x49f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x547>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x547>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x547>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0xa33>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x57b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0xa1d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x5af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x5a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x5a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x5d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x5d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x5cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x5d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x5e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x5db>
     a46:	88 59       	subi	r24, 0x98	; 152
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x637>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x621>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0xa05>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x635>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0xa05>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0xa1d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x649>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x641>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x661>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x659>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x68d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x685>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x6a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x6a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x6c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x6b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x6d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x6cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x7b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x7b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x7b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x863>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x863>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x863>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x977>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x9eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x9a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0xa2d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x9dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x9d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0xa2d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0xa2d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0xa33>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0xa33>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0xa3b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 34 1a 	jmp	0x3468	; 0x3468 <__epilogue_restores__>

00000ed2 <_fpadd_parts>:
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__prologue_saves__>
     ede:	dc 01       	movw	r26, r24
     ee0:	2b 01       	movw	r4, r22
     ee2:	fa 01       	movw	r30, r20
     ee4:	9c 91       	ld	r25, X
     ee6:	92 30       	cpi	r25, 0x02	; 2
     ee8:	08 f4       	brcc	.+2      	; 0xeec <_fpadd_parts+0x1a>
     eea:	39 c1       	rjmp	.+626    	; 0x115e <_fpadd_parts+0x28c>
     eec:	eb 01       	movw	r28, r22
     eee:	88 81       	ld	r24, Y
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <_fpadd_parts+0x24>
     ef4:	33 c1       	rjmp	.+614    	; 0x115c <_fpadd_parts+0x28a>
     ef6:	94 30       	cpi	r25, 0x04	; 4
     ef8:	69 f4       	brne	.+26     	; 0xf14 <_fpadd_parts+0x42>
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	09 f0       	breq	.+2      	; 0xf00 <_fpadd_parts+0x2e>
     efe:	2f c1       	rjmp	.+606    	; 0x115e <_fpadd_parts+0x28c>
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	9c 91       	ld	r25, X
     f04:	11 97       	sbiw	r26, 0x01	; 1
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	98 17       	cp	r25, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <_fpadd_parts+0x3c>
     f0c:	28 c1       	rjmp	.+592    	; 0x115e <_fpadd_parts+0x28c>
     f0e:	a0 e6       	ldi	r26, 0x60	; 96
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	25 c1       	rjmp	.+586    	; 0x115e <_fpadd_parts+0x28c>
     f14:	84 30       	cpi	r24, 0x04	; 4
     f16:	09 f4       	brne	.+2      	; 0xf1a <_fpadd_parts+0x48>
     f18:	21 c1       	rjmp	.+578    	; 0x115c <_fpadd_parts+0x28a>
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	a9 f4       	brne	.+42     	; 0xf48 <_fpadd_parts+0x76>
     f1e:	92 30       	cpi	r25, 0x02	; 2
     f20:	09 f0       	breq	.+2      	; 0xf24 <_fpadd_parts+0x52>
     f22:	1d c1       	rjmp	.+570    	; 0x115e <_fpadd_parts+0x28c>
     f24:	9a 01       	movw	r18, r20
     f26:	ad 01       	movw	r20, r26
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	ea 01       	movw	r28, r20
     f2c:	09 90       	ld	r0, Y+
     f2e:	ae 01       	movw	r20, r28
     f30:	e9 01       	movw	r28, r18
     f32:	09 92       	st	Y+, r0
     f34:	9e 01       	movw	r18, r28
     f36:	81 50       	subi	r24, 0x01	; 1
     f38:	c1 f7       	brne	.-16     	; 0xf2a <_fpadd_parts+0x58>
     f3a:	e2 01       	movw	r28, r4
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	9c 91       	ld	r25, X
     f42:	89 23       	and	r24, r25
     f44:	81 83       	std	Z+1, r24	; 0x01
     f46:	08 c1       	rjmp	.+528    	; 0x1158 <_fpadd_parts+0x286>
     f48:	92 30       	cpi	r25, 0x02	; 2
     f4a:	09 f4       	brne	.+2      	; 0xf4e <_fpadd_parts+0x7c>
     f4c:	07 c1       	rjmp	.+526    	; 0x115c <_fpadd_parts+0x28a>
     f4e:	12 96       	adiw	r26, 0x02	; 2
     f50:	2d 90       	ld	r2, X+
     f52:	3c 90       	ld	r3, X
     f54:	13 97       	sbiw	r26, 0x03	; 3
     f56:	eb 01       	movw	r28, r22
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	14 96       	adiw	r26, 0x04	; 4
     f5e:	ad 90       	ld	r10, X+
     f60:	bd 90       	ld	r11, X+
     f62:	cd 90       	ld	r12, X+
     f64:	dc 90       	ld	r13, X
     f66:	17 97       	sbiw	r26, 0x07	; 7
     f68:	ec 80       	ldd	r14, Y+4	; 0x04
     f6a:	fd 80       	ldd	r15, Y+5	; 0x05
     f6c:	0e 81       	ldd	r16, Y+6	; 0x06
     f6e:	1f 81       	ldd	r17, Y+7	; 0x07
     f70:	91 01       	movw	r18, r2
     f72:	28 1b       	sub	r18, r24
     f74:	39 0b       	sbc	r19, r25
     f76:	b9 01       	movw	r22, r18
     f78:	37 ff       	sbrs	r19, 7
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <_fpadd_parts+0xb2>
     f7c:	66 27       	eor	r22, r22
     f7e:	77 27       	eor	r23, r23
     f80:	62 1b       	sub	r22, r18
     f82:	73 0b       	sbc	r23, r19
     f84:	60 32       	cpi	r22, 0x20	; 32
     f86:	71 05       	cpc	r23, r1
     f88:	0c f0       	brlt	.+2      	; 0xf8c <_fpadd_parts+0xba>
     f8a:	61 c0       	rjmp	.+194    	; 0x104e <_fpadd_parts+0x17c>
     f8c:	12 16       	cp	r1, r18
     f8e:	13 06       	cpc	r1, r19
     f90:	6c f5       	brge	.+90     	; 0xfec <_fpadd_parts+0x11a>
     f92:	37 01       	movw	r6, r14
     f94:	48 01       	movw	r8, r16
     f96:	06 2e       	mov	r0, r22
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <_fpadd_parts+0xd0>
     f9a:	96 94       	lsr	r9
     f9c:	87 94       	ror	r8
     f9e:	77 94       	ror	r7
     fa0:	67 94       	ror	r6
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <_fpadd_parts+0xc8>
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <_fpadd_parts+0xe6>
     fb0:	22 0f       	add	r18, r18
     fb2:	33 1f       	adc	r19, r19
     fb4:	44 1f       	adc	r20, r20
     fb6:	55 1f       	adc	r21, r21
     fb8:	6a 95       	dec	r22
     fba:	d2 f7       	brpl	.-12     	; 0xfb0 <_fpadd_parts+0xde>
     fbc:	21 50       	subi	r18, 0x01	; 1
     fbe:	30 40       	sbci	r19, 0x00	; 0
     fc0:	40 40       	sbci	r20, 0x00	; 0
     fc2:	50 40       	sbci	r21, 0x00	; 0
     fc4:	2e 21       	and	r18, r14
     fc6:	3f 21       	and	r19, r15
     fc8:	40 23       	and	r20, r16
     fca:	51 23       	and	r21, r17
     fcc:	21 15       	cp	r18, r1
     fce:	31 05       	cpc	r19, r1
     fd0:	41 05       	cpc	r20, r1
     fd2:	51 05       	cpc	r21, r1
     fd4:	21 f0       	breq	.+8      	; 0xfde <_fpadd_parts+0x10c>
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	79 01       	movw	r14, r18
     fe0:	8a 01       	movw	r16, r20
     fe2:	e6 28       	or	r14, r6
     fe4:	f7 28       	or	r15, r7
     fe6:	08 29       	or	r16, r8
     fe8:	19 29       	or	r17, r9
     fea:	3c c0       	rjmp	.+120    	; 0x1064 <_fpadd_parts+0x192>
     fec:	23 2b       	or	r18, r19
     fee:	d1 f1       	breq	.+116    	; 0x1064 <_fpadd_parts+0x192>
     ff0:	26 0e       	add	r2, r22
     ff2:	37 1e       	adc	r3, r23
     ff4:	35 01       	movw	r6, r10
     ff6:	46 01       	movw	r8, r12
     ff8:	06 2e       	mov	r0, r22
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <_fpadd_parts+0x132>
     ffc:	96 94       	lsr	r9
     ffe:	87 94       	ror	r8
    1000:	77 94       	ror	r7
    1002:	67 94       	ror	r6
    1004:	0a 94       	dec	r0
    1006:	d2 f7       	brpl	.-12     	; 0xffc <_fpadd_parts+0x12a>
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	04 c0       	rjmp	.+8      	; 0x101a <_fpadd_parts+0x148>
    1012:	22 0f       	add	r18, r18
    1014:	33 1f       	adc	r19, r19
    1016:	44 1f       	adc	r20, r20
    1018:	55 1f       	adc	r21, r21
    101a:	6a 95       	dec	r22
    101c:	d2 f7       	brpl	.-12     	; 0x1012 <_fpadd_parts+0x140>
    101e:	21 50       	subi	r18, 0x01	; 1
    1020:	30 40       	sbci	r19, 0x00	; 0
    1022:	40 40       	sbci	r20, 0x00	; 0
    1024:	50 40       	sbci	r21, 0x00	; 0
    1026:	2a 21       	and	r18, r10
    1028:	3b 21       	and	r19, r11
    102a:	4c 21       	and	r20, r12
    102c:	5d 21       	and	r21, r13
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	41 05       	cpc	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	21 f0       	breq	.+8      	; 0x1040 <_fpadd_parts+0x16e>
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	59 01       	movw	r10, r18
    1042:	6a 01       	movw	r12, r20
    1044:	a6 28       	or	r10, r6
    1046:	b7 28       	or	r11, r7
    1048:	c8 28       	or	r12, r8
    104a:	d9 28       	or	r13, r9
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <_fpadd_parts+0x192>
    104e:	82 15       	cp	r24, r2
    1050:	93 05       	cpc	r25, r3
    1052:	2c f0       	brlt	.+10     	; 0x105e <_fpadd_parts+0x18c>
    1054:	1c 01       	movw	r2, r24
    1056:	aa 24       	eor	r10, r10
    1058:	bb 24       	eor	r11, r11
    105a:	65 01       	movw	r12, r10
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <_fpadd_parts+0x192>
    105e:	ee 24       	eor	r14, r14
    1060:	ff 24       	eor	r15, r15
    1062:	87 01       	movw	r16, r14
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	9c 91       	ld	r25, X
    1068:	d2 01       	movw	r26, r4
    106a:	11 96       	adiw	r26, 0x01	; 1
    106c:	8c 91       	ld	r24, X
    106e:	98 17       	cp	r25, r24
    1070:	09 f4       	brne	.+2      	; 0x1074 <_fpadd_parts+0x1a2>
    1072:	45 c0       	rjmp	.+138    	; 0x10fe <_fpadd_parts+0x22c>
    1074:	99 23       	and	r25, r25
    1076:	39 f0       	breq	.+14     	; 0x1086 <_fpadd_parts+0x1b4>
    1078:	a8 01       	movw	r20, r16
    107a:	97 01       	movw	r18, r14
    107c:	2a 19       	sub	r18, r10
    107e:	3b 09       	sbc	r19, r11
    1080:	4c 09       	sbc	r20, r12
    1082:	5d 09       	sbc	r21, r13
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <_fpadd_parts+0x1c0>
    1086:	a6 01       	movw	r20, r12
    1088:	95 01       	movw	r18, r10
    108a:	2e 19       	sub	r18, r14
    108c:	3f 09       	sbc	r19, r15
    108e:	40 0b       	sbc	r20, r16
    1090:	51 0b       	sbc	r21, r17
    1092:	57 fd       	sbrc	r21, 7
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <_fpadd_parts+0x1d4>
    1096:	11 82       	std	Z+1, r1	; 0x01
    1098:	33 82       	std	Z+3, r3	; 0x03
    109a:	22 82       	std	Z+2, r2	; 0x02
    109c:	24 83       	std	Z+4, r18	; 0x04
    109e:	35 83       	std	Z+5, r19	; 0x05
    10a0:	46 83       	std	Z+6, r20	; 0x06
    10a2:	57 83       	std	Z+7, r21	; 0x07
    10a4:	1d c0       	rjmp	.+58     	; 0x10e0 <_fpadd_parts+0x20e>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	81 83       	std	Z+1, r24	; 0x01
    10aa:	33 82       	std	Z+3, r3	; 0x03
    10ac:	22 82       	std	Z+2, r2	; 0x02
    10ae:	88 27       	eor	r24, r24
    10b0:	99 27       	eor	r25, r25
    10b2:	dc 01       	movw	r26, r24
    10b4:	82 1b       	sub	r24, r18
    10b6:	93 0b       	sbc	r25, r19
    10b8:	a4 0b       	sbc	r26, r20
    10ba:	b5 0b       	sbc	r27, r21
    10bc:	84 83       	std	Z+4, r24	; 0x04
    10be:	95 83       	std	Z+5, r25	; 0x05
    10c0:	a6 83       	std	Z+6, r26	; 0x06
    10c2:	b7 83       	std	Z+7, r27	; 0x07
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <_fpadd_parts+0x20e>
    10c6:	22 0f       	add	r18, r18
    10c8:	33 1f       	adc	r19, r19
    10ca:	44 1f       	adc	r20, r20
    10cc:	55 1f       	adc	r21, r21
    10ce:	24 83       	std	Z+4, r18	; 0x04
    10d0:	35 83       	std	Z+5, r19	; 0x05
    10d2:	46 83       	std	Z+6, r20	; 0x06
    10d4:	57 83       	std	Z+7, r21	; 0x07
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	93 83       	std	Z+3, r25	; 0x03
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	24 81       	ldd	r18, Z+4	; 0x04
    10e2:	35 81       	ldd	r19, Z+5	; 0x05
    10e4:	46 81       	ldd	r20, Z+6	; 0x06
    10e6:	57 81       	ldd	r21, Z+7	; 0x07
    10e8:	da 01       	movw	r26, r20
    10ea:	c9 01       	movw	r24, r18
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	a1 09       	sbc	r26, r1
    10f0:	b1 09       	sbc	r27, r1
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	af 4f       	sbci	r26, 0xFF	; 255
    10f8:	bf 43       	sbci	r27, 0x3F	; 63
    10fa:	28 f3       	brcs	.-54     	; 0x10c6 <_fpadd_parts+0x1f4>
    10fc:	0b c0       	rjmp	.+22     	; 0x1114 <_fpadd_parts+0x242>
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	33 82       	std	Z+3, r3	; 0x03
    1102:	22 82       	std	Z+2, r2	; 0x02
    1104:	ea 0c       	add	r14, r10
    1106:	fb 1c       	adc	r15, r11
    1108:	0c 1d       	adc	r16, r12
    110a:	1d 1d       	adc	r17, r13
    110c:	e4 82       	std	Z+4, r14	; 0x04
    110e:	f5 82       	std	Z+5, r15	; 0x05
    1110:	06 83       	std	Z+6, r16	; 0x06
    1112:	17 83       	std	Z+7, r17	; 0x07
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	80 83       	st	Z, r24
    1118:	24 81       	ldd	r18, Z+4	; 0x04
    111a:	35 81       	ldd	r19, Z+5	; 0x05
    111c:	46 81       	ldd	r20, Z+6	; 0x06
    111e:	57 81       	ldd	r21, Z+7	; 0x07
    1120:	57 ff       	sbrs	r21, 7
    1122:	1a c0       	rjmp	.+52     	; 0x1158 <_fpadd_parts+0x286>
    1124:	c9 01       	movw	r24, r18
    1126:	aa 27       	eor	r26, r26
    1128:	97 fd       	sbrc	r25, 7
    112a:	a0 95       	com	r26
    112c:	ba 2f       	mov	r27, r26
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	a0 70       	andi	r26, 0x00	; 0
    1134:	b0 70       	andi	r27, 0x00	; 0
    1136:	56 95       	lsr	r21
    1138:	47 95       	ror	r20
    113a:	37 95       	ror	r19
    113c:	27 95       	ror	r18
    113e:	82 2b       	or	r24, r18
    1140:	93 2b       	or	r25, r19
    1142:	a4 2b       	or	r26, r20
    1144:	b5 2b       	or	r27, r21
    1146:	84 83       	std	Z+4, r24	; 0x04
    1148:	95 83       	std	Z+5, r25	; 0x05
    114a:	a6 83       	std	Z+6, r26	; 0x06
    114c:	b7 83       	std	Z+7, r27	; 0x07
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	93 83       	std	Z+3, r25	; 0x03
    1156:	82 83       	std	Z+2, r24	; 0x02
    1158:	df 01       	movw	r26, r30
    115a:	01 c0       	rjmp	.+2      	; 0x115e <_fpadd_parts+0x28c>
    115c:	d2 01       	movw	r26, r4
    115e:	cd 01       	movw	r24, r26
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	e2 e1       	ldi	r30, 0x12	; 18
    1166:	0c 94 34 1a 	jmp	0x3468	; 0x3468 <__epilogue_restores__>

0000116a <__subsf3>:
    116a:	a0 e2       	ldi	r26, 0x20	; 32
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb eb       	ldi	r30, 0xBB	; 187
    1170:	f8 e0       	ldi	r31, 0x08	; 8
    1172:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__prologue_saves__+0x18>
    1176:	69 83       	std	Y+1, r22	; 0x01
    1178:	7a 83       	std	Y+2, r23	; 0x02
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	2d 83       	std	Y+5, r18	; 0x05
    1180:	3e 83       	std	Y+6, r19	; 0x06
    1182:	4f 83       	std	Y+7, r20	; 0x07
    1184:	58 87       	std	Y+8, r21	; 0x08
    1186:	e9 e0       	ldi	r30, 0x09	; 9
    1188:	ee 2e       	mov	r14, r30
    118a:	f1 2c       	mov	r15, r1
    118c:	ec 0e       	add	r14, r28
    118e:	fd 1e       	adc	r15, r29
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	b7 01       	movw	r22, r14
    1196:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    119a:	8e 01       	movw	r16, r28
    119c:	0f 5e       	subi	r16, 0xEF	; 239
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	ce 01       	movw	r24, r28
    11a2:	05 96       	adiw	r24, 0x05	; 5
    11a4:	b8 01       	movw	r22, r16
    11a6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    11aa:	8a 89       	ldd	r24, Y+18	; 0x12
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	89 27       	eor	r24, r25
    11b0:	8a 8b       	std	Y+18, r24	; 0x12
    11b2:	c7 01       	movw	r24, r14
    11b4:	b8 01       	movw	r22, r16
    11b6:	ae 01       	movw	r20, r28
    11b8:	47 5e       	subi	r20, 0xE7	; 231
    11ba:	5f 4f       	sbci	r21, 0xFF	; 255
    11bc:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    11c0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    11c4:	a0 96       	adiw	r28, 0x20	; 32
    11c6:	e6 e0       	ldi	r30, 0x06	; 6
    11c8:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__epilogue_restores__+0x18>

000011cc <__addsf3>:
    11cc:	a0 e2       	ldi	r26, 0x20	; 32
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ec ee       	ldi	r30, 0xEC	; 236
    11d2:	f8 e0       	ldi	r31, 0x08	; 8
    11d4:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__prologue_saves__+0x18>
    11d8:	69 83       	std	Y+1, r22	; 0x01
    11da:	7a 83       	std	Y+2, r23	; 0x02
    11dc:	8b 83       	std	Y+3, r24	; 0x03
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	2d 83       	std	Y+5, r18	; 0x05
    11e2:	3e 83       	std	Y+6, r19	; 0x06
    11e4:	4f 83       	std	Y+7, r20	; 0x07
    11e6:	58 87       	std	Y+8, r21	; 0x08
    11e8:	f9 e0       	ldi	r31, 0x09	; 9
    11ea:	ef 2e       	mov	r14, r31
    11ec:	f1 2c       	mov	r15, r1
    11ee:	ec 0e       	add	r14, r28
    11f0:	fd 1e       	adc	r15, r29
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	b7 01       	movw	r22, r14
    11f8:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    11fc:	8e 01       	movw	r16, r28
    11fe:	0f 5e       	subi	r16, 0xEF	; 239
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	ce 01       	movw	r24, r28
    1204:	05 96       	adiw	r24, 0x05	; 5
    1206:	b8 01       	movw	r22, r16
    1208:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    120c:	c7 01       	movw	r24, r14
    120e:	b8 01       	movw	r22, r16
    1210:	ae 01       	movw	r20, r28
    1212:	47 5e       	subi	r20, 0xE7	; 231
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    121a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    121e:	a0 96       	adiw	r28, 0x20	; 32
    1220:	e6 e0       	ldi	r30, 0x06	; 6
    1222:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__epilogue_restores__+0x18>

00001226 <__mulsf3>:
    1226:	a0 e2       	ldi	r26, 0x20	; 32
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e9 e1       	ldi	r30, 0x19	; 25
    122c:	f9 e0       	ldi	r31, 0x09	; 9
    122e:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__prologue_saves__>
    1232:	69 83       	std	Y+1, r22	; 0x01
    1234:	7a 83       	std	Y+2, r23	; 0x02
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	2d 83       	std	Y+5, r18	; 0x05
    123c:	3e 83       	std	Y+6, r19	; 0x06
    123e:	4f 83       	std	Y+7, r20	; 0x07
    1240:	58 87       	std	Y+8, r21	; 0x08
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	be 01       	movw	r22, r28
    1248:	67 5f       	subi	r22, 0xF7	; 247
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    1250:	ce 01       	movw	r24, r28
    1252:	05 96       	adiw	r24, 0x05	; 5
    1254:	be 01       	movw	r22, r28
    1256:	6f 5e       	subi	r22, 0xEF	; 239
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    125e:	99 85       	ldd	r25, Y+9	; 0x09
    1260:	92 30       	cpi	r25, 0x02	; 2
    1262:	88 f0       	brcs	.+34     	; 0x1286 <__mulsf3+0x60>
    1264:	89 89       	ldd	r24, Y+17	; 0x11
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	c8 f0       	brcs	.+50     	; 0x129c <__mulsf3+0x76>
    126a:	94 30       	cpi	r25, 0x04	; 4
    126c:	19 f4       	brne	.+6      	; 0x1274 <__mulsf3+0x4e>
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	51 f4       	brne	.+20     	; 0x1286 <__mulsf3+0x60>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <__mulsf3+0x56>
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	29 f4       	brne	.+10     	; 0x1282 <__mulsf3+0x5c>
    1278:	92 30       	cpi	r25, 0x02	; 2
    127a:	81 f4       	brne	.+32     	; 0x129c <__mulsf3+0x76>
    127c:	80 e6       	ldi	r24, 0x60	; 96
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	c6 c0       	rjmp	.+396    	; 0x140e <__mulsf3+0x1e8>
    1282:	92 30       	cpi	r25, 0x02	; 2
    1284:	49 f4       	brne	.+18     	; 0x1298 <__mulsf3+0x72>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	8a 89       	ldd	r24, Y+18	; 0x12
    128c:	98 13       	cpse	r25, r24
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	2a 87       	std	Y+10, r18	; 0x0a
    1292:	ce 01       	movw	r24, r28
    1294:	09 96       	adiw	r24, 0x09	; 9
    1296:	bb c0       	rjmp	.+374    	; 0x140e <__mulsf3+0x1e8>
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	49 f4       	brne	.+18     	; 0x12ae <__mulsf3+0x88>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a0:	8a 89       	ldd	r24, Y+18	; 0x12
    12a2:	98 13       	cpse	r25, r24
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	2a 8b       	std	Y+18, r18	; 0x12
    12a8:	ce 01       	movw	r24, r28
    12aa:	41 96       	adiw	r24, 0x11	; 17
    12ac:	b0 c0       	rjmp	.+352    	; 0x140e <__mulsf3+0x1e8>
    12ae:	2d 84       	ldd	r2, Y+13	; 0x0d
    12b0:	3e 84       	ldd	r3, Y+14	; 0x0e
    12b2:	4f 84       	ldd	r4, Y+15	; 0x0f
    12b4:	58 88       	ldd	r5, Y+16	; 0x10
    12b6:	6d 88       	ldd	r6, Y+21	; 0x15
    12b8:	7e 88       	ldd	r7, Y+22	; 0x16
    12ba:	8f 88       	ldd	r8, Y+23	; 0x17
    12bc:	98 8c       	ldd	r9, Y+24	; 0x18
    12be:	ee 24       	eor	r14, r14
    12c0:	ff 24       	eor	r15, r15
    12c2:	87 01       	movw	r16, r14
    12c4:	aa 24       	eor	r10, r10
    12c6:	bb 24       	eor	r11, r11
    12c8:	65 01       	movw	r12, r10
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	e0 e0       	ldi	r30, 0x00	; 0
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	c1 01       	movw	r24, r2
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	89 2b       	or	r24, r25
    12de:	e9 f0       	breq	.+58     	; 0x131a <__mulsf3+0xf4>
    12e0:	e6 0c       	add	r14, r6
    12e2:	f7 1c       	adc	r15, r7
    12e4:	08 1d       	adc	r16, r8
    12e6:	19 1d       	adc	r17, r9
    12e8:	9a 01       	movw	r18, r20
    12ea:	ab 01       	movw	r20, r22
    12ec:	2a 0d       	add	r18, r10
    12ee:	3b 1d       	adc	r19, r11
    12f0:	4c 1d       	adc	r20, r12
    12f2:	5d 1d       	adc	r21, r13
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e6 14       	cp	r14, r6
    12fe:	f7 04       	cpc	r15, r7
    1300:	08 05       	cpc	r16, r8
    1302:	19 05       	cpc	r17, r9
    1304:	20 f4       	brcc	.+8      	; 0x130e <__mulsf3+0xe8>
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ba 01       	movw	r22, r20
    1310:	a9 01       	movw	r20, r18
    1312:	48 0f       	add	r20, r24
    1314:	59 1f       	adc	r21, r25
    1316:	6a 1f       	adc	r22, r26
    1318:	7b 1f       	adc	r23, r27
    131a:	aa 0c       	add	r10, r10
    131c:	bb 1c       	adc	r11, r11
    131e:	cc 1c       	adc	r12, r12
    1320:	dd 1c       	adc	r13, r13
    1322:	97 fe       	sbrs	r9, 7
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <__mulsf3+0x110>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e0       	ldi	r26, 0x00	; 0
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	a8 2a       	or	r10, r24
    1330:	b9 2a       	or	r11, r25
    1332:	ca 2a       	or	r12, r26
    1334:	db 2a       	or	r13, r27
    1336:	31 96       	adiw	r30, 0x01	; 1
    1338:	e0 32       	cpi	r30, 0x20	; 32
    133a:	f1 05       	cpc	r31, r1
    133c:	49 f0       	breq	.+18     	; 0x1350 <__mulsf3+0x12a>
    133e:	66 0c       	add	r6, r6
    1340:	77 1c       	adc	r7, r7
    1342:	88 1c       	adc	r8, r8
    1344:	99 1c       	adc	r9, r9
    1346:	56 94       	lsr	r5
    1348:	47 94       	ror	r4
    134a:	37 94       	ror	r3
    134c:	27 94       	ror	r2
    134e:	c3 cf       	rjmp	.-122    	; 0x12d6 <__mulsf3+0xb0>
    1350:	fa 85       	ldd	r31, Y+10	; 0x0a
    1352:	ea 89       	ldd	r30, Y+18	; 0x12
    1354:	2b 89       	ldd	r18, Y+19	; 0x13
    1356:	3c 89       	ldd	r19, Y+20	; 0x14
    1358:	8b 85       	ldd	r24, Y+11	; 0x0b
    135a:	9c 85       	ldd	r25, Y+12	; 0x0c
    135c:	28 0f       	add	r18, r24
    135e:	39 1f       	adc	r19, r25
    1360:	2e 5f       	subi	r18, 0xFE	; 254
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	17 c0       	rjmp	.+46     	; 0x1394 <__mulsf3+0x16e>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	89 2b       	or	r24, r25
    136e:	61 f0       	breq	.+24     	; 0x1388 <__mulsf3+0x162>
    1370:	16 95       	lsr	r17
    1372:	07 95       	ror	r16
    1374:	f7 94       	ror	r15
    1376:	e7 94       	ror	r14
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	b0 e8       	ldi	r27, 0x80	; 128
    1380:	e8 2a       	or	r14, r24
    1382:	f9 2a       	or	r15, r25
    1384:	0a 2b       	or	r16, r26
    1386:	1b 2b       	or	r17, r27
    1388:	76 95       	lsr	r23
    138a:	67 95       	ror	r22
    138c:	57 95       	ror	r21
    138e:	47 95       	ror	r20
    1390:	2f 5f       	subi	r18, 0xFF	; 255
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
    1394:	77 fd       	sbrc	r23, 7
    1396:	e7 cf       	rjmp	.-50     	; 0x1366 <__mulsf3+0x140>
    1398:	0c c0       	rjmp	.+24     	; 0x13b2 <__mulsf3+0x18c>
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	17 fd       	sbrc	r17, 7
    13a4:	41 60       	ori	r20, 0x01	; 1
    13a6:	ee 0c       	add	r14, r14
    13a8:	ff 1c       	adc	r15, r15
    13aa:	00 1f       	adc	r16, r16
    13ac:	11 1f       	adc	r17, r17
    13ae:	21 50       	subi	r18, 0x01	; 1
    13b0:	30 40       	sbci	r19, 0x00	; 0
    13b2:	40 30       	cpi	r20, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	59 07       	cpc	r21, r25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	69 07       	cpc	r22, r25
    13bc:	90 e4       	ldi	r25, 0x40	; 64
    13be:	79 07       	cpc	r23, r25
    13c0:	60 f3       	brcs	.-40     	; 0x139a <__mulsf3+0x174>
    13c2:	2b 8f       	std	Y+27, r18	; 0x1b
    13c4:	3c 8f       	std	Y+28, r19	; 0x1c
    13c6:	db 01       	movw	r26, r22
    13c8:	ca 01       	movw	r24, r20
    13ca:	8f 77       	andi	r24, 0x7F	; 127
    13cc:	90 70       	andi	r25, 0x00	; 0
    13ce:	a0 70       	andi	r26, 0x00	; 0
    13d0:	b0 70       	andi	r27, 0x00	; 0
    13d2:	80 34       	cpi	r24, 0x40	; 64
    13d4:	91 05       	cpc	r25, r1
    13d6:	a1 05       	cpc	r26, r1
    13d8:	b1 05       	cpc	r27, r1
    13da:	61 f4       	brne	.+24     	; 0x13f4 <__mulsf3+0x1ce>
    13dc:	47 fd       	sbrc	r20, 7
    13de:	0a c0       	rjmp	.+20     	; 0x13f4 <__mulsf3+0x1ce>
    13e0:	e1 14       	cp	r14, r1
    13e2:	f1 04       	cpc	r15, r1
    13e4:	01 05       	cpc	r16, r1
    13e6:	11 05       	cpc	r17, r1
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <__mulsf3+0x1ce>
    13ea:	40 5c       	subi	r20, 0xC0	; 192
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	6f 4f       	sbci	r22, 0xFF	; 255
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	40 78       	andi	r20, 0x80	; 128
    13f4:	1a 8e       	std	Y+26, r1	; 0x1a
    13f6:	fe 17       	cp	r31, r30
    13f8:	11 f0       	breq	.+4      	; 0x13fe <__mulsf3+0x1d8>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	8a 8f       	std	Y+26, r24	; 0x1a
    13fe:	4d 8f       	std	Y+29, r20	; 0x1d
    1400:	5e 8f       	std	Y+30, r21	; 0x1e
    1402:	6f 8f       	std	Y+31, r22	; 0x1f
    1404:	78 a3       	std	Y+32, r23	; 0x20
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	89 8f       	std	Y+25, r24	; 0x19
    140a:	ce 01       	movw	r24, r28
    140c:	49 96       	adiw	r24, 0x19	; 25
    140e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    1412:	a0 96       	adiw	r28, 0x20	; 32
    1414:	e2 e1       	ldi	r30, 0x12	; 18
    1416:	0c 94 34 1a 	jmp	0x3468	; 0x3468 <__epilogue_restores__>

0000141a <__gtsf2>:
    141a:	a8 e1       	ldi	r26, 0x18	; 24
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e1       	ldi	r30, 0x13	; 19
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__prologue_saves__+0x18>
    1426:	69 83       	std	Y+1, r22	; 0x01
    1428:	7a 83       	std	Y+2, r23	; 0x02
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	2d 83       	std	Y+5, r18	; 0x05
    1430:	3e 83       	std	Y+6, r19	; 0x06
    1432:	4f 83       	std	Y+7, r20	; 0x07
    1434:	58 87       	std	Y+8, r21	; 0x08
    1436:	89 e0       	ldi	r24, 0x09	; 9
    1438:	e8 2e       	mov	r14, r24
    143a:	f1 2c       	mov	r15, r1
    143c:	ec 0e       	add	r14, r28
    143e:	fd 1e       	adc	r15, r29
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	b7 01       	movw	r22, r14
    1446:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    144a:	8e 01       	movw	r16, r28
    144c:	0f 5e       	subi	r16, 0xEF	; 239
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	ce 01       	movw	r24, r28
    1452:	05 96       	adiw	r24, 0x05	; 5
    1454:	b8 01       	movw	r22, r16
    1456:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	40 f0       	brcs	.+16     	; 0x1470 <__gtsf2+0x56>
    1460:	89 89       	ldd	r24, Y+17	; 0x11
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	28 f0       	brcs	.+10     	; 0x1470 <__gtsf2+0x56>
    1466:	c7 01       	movw	r24, r14
    1468:	b8 01       	movw	r22, r16
    146a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <__gtsf2+0x58>
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	68 96       	adiw	r28, 0x18	; 24
    1474:	e6 e0       	ldi	r30, 0x06	; 6
    1476:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__epilogue_restores__+0x18>

0000147a <__gesf2>:
    147a:	a8 e1       	ldi	r26, 0x18	; 24
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e3 e4       	ldi	r30, 0x43	; 67
    1480:	fa e0       	ldi	r31, 0x0A	; 10
    1482:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__prologue_saves__+0x18>
    1486:	69 83       	std	Y+1, r22	; 0x01
    1488:	7a 83       	std	Y+2, r23	; 0x02
    148a:	8b 83       	std	Y+3, r24	; 0x03
    148c:	9c 83       	std	Y+4, r25	; 0x04
    148e:	2d 83       	std	Y+5, r18	; 0x05
    1490:	3e 83       	std	Y+6, r19	; 0x06
    1492:	4f 83       	std	Y+7, r20	; 0x07
    1494:	58 87       	std	Y+8, r21	; 0x08
    1496:	89 e0       	ldi	r24, 0x09	; 9
    1498:	e8 2e       	mov	r14, r24
    149a:	f1 2c       	mov	r15, r1
    149c:	ec 0e       	add	r14, r28
    149e:	fd 1e       	adc	r15, r29
    14a0:	ce 01       	movw	r24, r28
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	b7 01       	movw	r22, r14
    14a6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    14aa:	8e 01       	movw	r16, r28
    14ac:	0f 5e       	subi	r16, 0xEF	; 239
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	ce 01       	movw	r24, r28
    14b2:	05 96       	adiw	r24, 0x05	; 5
    14b4:	b8 01       	movw	r22, r16
    14b6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	40 f0       	brcs	.+16     	; 0x14d0 <__gesf2+0x56>
    14c0:	89 89       	ldd	r24, Y+17	; 0x11
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	28 f0       	brcs	.+10     	; 0x14d0 <__gesf2+0x56>
    14c6:	c7 01       	movw	r24, r14
    14c8:	b8 01       	movw	r22, r16
    14ca:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <__gesf2+0x58>
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	68 96       	adiw	r28, 0x18	; 24
    14d4:	e6 e0       	ldi	r30, 0x06	; 6
    14d6:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__epilogue_restores__+0x18>

000014da <__ltsf2>:
    14da:	a8 e1       	ldi	r26, 0x18	; 24
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e3 e7       	ldi	r30, 0x73	; 115
    14e0:	fa e0       	ldi	r31, 0x0A	; 10
    14e2:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__prologue_saves__+0x18>
    14e6:	69 83       	std	Y+1, r22	; 0x01
    14e8:	7a 83       	std	Y+2, r23	; 0x02
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	2d 83       	std	Y+5, r18	; 0x05
    14f0:	3e 83       	std	Y+6, r19	; 0x06
    14f2:	4f 83       	std	Y+7, r20	; 0x07
    14f4:	58 87       	std	Y+8, r21	; 0x08
    14f6:	89 e0       	ldi	r24, 0x09	; 9
    14f8:	e8 2e       	mov	r14, r24
    14fa:	f1 2c       	mov	r15, r1
    14fc:	ec 0e       	add	r14, r28
    14fe:	fd 1e       	adc	r15, r29
    1500:	ce 01       	movw	r24, r28
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	b7 01       	movw	r22, r14
    1506:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    150a:	8e 01       	movw	r16, r28
    150c:	0f 5e       	subi	r16, 0xEF	; 239
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	ce 01       	movw	r24, r28
    1512:	05 96       	adiw	r24, 0x05	; 5
    1514:	b8 01       	movw	r22, r16
    1516:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    151a:	89 85       	ldd	r24, Y+9	; 0x09
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	40 f0       	brcs	.+16     	; 0x1530 <__ltsf2+0x56>
    1520:	89 89       	ldd	r24, Y+17	; 0x11
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	28 f0       	brcs	.+10     	; 0x1530 <__ltsf2+0x56>
    1526:	c7 01       	movw	r24, r14
    1528:	b8 01       	movw	r22, r16
    152a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <__ltsf2+0x58>
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	68 96       	adiw	r28, 0x18	; 24
    1534:	e6 e0       	ldi	r30, 0x06	; 6
    1536:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__epilogue_restores__+0x18>

0000153a <__fixsfsi>:
    153a:	ac e0       	ldi	r26, 0x0C	; 12
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e3 ea       	ldi	r30, 0xA3	; 163
    1540:	fa e0       	ldi	r31, 0x0A	; 10
    1542:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__prologue_saves__+0x20>
    1546:	69 83       	std	Y+1, r22	; 0x01
    1548:	7a 83       	std	Y+2, r23	; 0x02
    154a:	8b 83       	std	Y+3, r24	; 0x03
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	ce 01       	movw	r24, r28
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	be 01       	movw	r22, r28
    1554:	6b 5f       	subi	r22, 0xFB	; 251
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	61 f1       	breq	.+88     	; 0x15ba <__fixsfsi+0x80>
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	50 f1       	brcs	.+84     	; 0x15ba <__fixsfsi+0x80>
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	21 f4       	brne	.+8      	; 0x1572 <__fixsfsi+0x38>
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	88 23       	and	r24, r24
    156e:	51 f1       	breq	.+84     	; 0x15c4 <__fixsfsi+0x8a>
    1570:	2e c0       	rjmp	.+92     	; 0x15ce <__fixsfsi+0x94>
    1572:	2f 81       	ldd	r18, Y+7	; 0x07
    1574:	38 85       	ldd	r19, Y+8	; 0x08
    1576:	37 fd       	sbrc	r19, 7
    1578:	20 c0       	rjmp	.+64     	; 0x15ba <__fixsfsi+0x80>
    157a:	6e 81       	ldd	r22, Y+6	; 0x06
    157c:	2f 31       	cpi	r18, 0x1F	; 31
    157e:	31 05       	cpc	r19, r1
    1580:	1c f0       	brlt	.+6      	; 0x1588 <__fixsfsi+0x4e>
    1582:	66 23       	and	r22, r22
    1584:	f9 f0       	breq	.+62     	; 0x15c4 <__fixsfsi+0x8a>
    1586:	23 c0       	rjmp	.+70     	; 0x15ce <__fixsfsi+0x94>
    1588:	8e e1       	ldi	r24, 0x1E	; 30
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	82 1b       	sub	r24, r18
    158e:	93 0b       	sbc	r25, r19
    1590:	29 85       	ldd	r18, Y+9	; 0x09
    1592:	3a 85       	ldd	r19, Y+10	; 0x0a
    1594:	4b 85       	ldd	r20, Y+11	; 0x0b
    1596:	5c 85       	ldd	r21, Y+12	; 0x0c
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <__fixsfsi+0x68>
    159a:	56 95       	lsr	r21
    159c:	47 95       	ror	r20
    159e:	37 95       	ror	r19
    15a0:	27 95       	ror	r18
    15a2:	8a 95       	dec	r24
    15a4:	d2 f7       	brpl	.-12     	; 0x159a <__fixsfsi+0x60>
    15a6:	66 23       	and	r22, r22
    15a8:	b1 f0       	breq	.+44     	; 0x15d6 <__fixsfsi+0x9c>
    15aa:	50 95       	com	r21
    15ac:	40 95       	com	r20
    15ae:	30 95       	com	r19
    15b0:	21 95       	neg	r18
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	4f 4f       	sbci	r20, 0xFF	; 255
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <__fixsfsi+0x9c>
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <__fixsfsi+0x9c>
    15c4:	2f ef       	ldi	r18, 0xFF	; 255
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f ef       	ldi	r20, 0xFF	; 255
    15ca:	5f e7       	ldi	r21, 0x7F	; 127
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <__fixsfsi+0x9c>
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	50 e8       	ldi	r21, 0x80	; 128
    15d6:	b9 01       	movw	r22, r18
    15d8:	ca 01       	movw	r24, r20
    15da:	2c 96       	adiw	r28, 0x0c	; 12
    15dc:	e2 e0       	ldi	r30, 0x02	; 2
    15de:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <__epilogue_restores__+0x20>

000015e2 <__pack_f>:
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	fc 01       	movw	r30, r24
    15ee:	e4 80       	ldd	r14, Z+4	; 0x04
    15f0:	f5 80       	ldd	r15, Z+5	; 0x05
    15f2:	06 81       	ldd	r16, Z+6	; 0x06
    15f4:	17 81       	ldd	r17, Z+7	; 0x07
    15f6:	d1 80       	ldd	r13, Z+1	; 0x01
    15f8:	80 81       	ld	r24, Z
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	48 f4       	brcc	.+18     	; 0x1610 <__pack_f+0x2e>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e1       	ldi	r26, 0x10	; 16
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e8 2a       	or	r14, r24
    1608:	f9 2a       	or	r15, r25
    160a:	0a 2b       	or	r16, r26
    160c:	1b 2b       	or	r17, r27
    160e:	a5 c0       	rjmp	.+330    	; 0x175a <__pack_f+0x178>
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	09 f4       	brne	.+2      	; 0x1616 <__pack_f+0x34>
    1614:	9f c0       	rjmp	.+318    	; 0x1754 <__pack_f+0x172>
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	21 f4       	brne	.+8      	; 0x1622 <__pack_f+0x40>
    161a:	ee 24       	eor	r14, r14
    161c:	ff 24       	eor	r15, r15
    161e:	87 01       	movw	r16, r14
    1620:	05 c0       	rjmp	.+10     	; 0x162c <__pack_f+0x4a>
    1622:	e1 14       	cp	r14, r1
    1624:	f1 04       	cpc	r15, r1
    1626:	01 05       	cpc	r16, r1
    1628:	11 05       	cpc	r17, r1
    162a:	19 f4       	brne	.+6      	; 0x1632 <__pack_f+0x50>
    162c:	e0 e0       	ldi	r30, 0x00	; 0
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	96 c0       	rjmp	.+300    	; 0x175e <__pack_f+0x17c>
    1632:	62 81       	ldd	r22, Z+2	; 0x02
    1634:	73 81       	ldd	r23, Z+3	; 0x03
    1636:	9f ef       	ldi	r25, 0xFF	; 255
    1638:	62 38       	cpi	r22, 0x82	; 130
    163a:	79 07       	cpc	r23, r25
    163c:	0c f0       	brlt	.+2      	; 0x1640 <__pack_f+0x5e>
    163e:	5b c0       	rjmp	.+182    	; 0x16f6 <__pack_f+0x114>
    1640:	22 e8       	ldi	r18, 0x82	; 130
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	26 1b       	sub	r18, r22
    1646:	37 0b       	sbc	r19, r23
    1648:	2a 31       	cpi	r18, 0x1A	; 26
    164a:	31 05       	cpc	r19, r1
    164c:	2c f0       	brlt	.+10     	; 0x1658 <__pack_f+0x76>
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	2a c0       	rjmp	.+84     	; 0x16ac <__pack_f+0xca>
    1658:	b8 01       	movw	r22, r16
    165a:	a7 01       	movw	r20, r14
    165c:	02 2e       	mov	r0, r18
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__pack_f+0x86>
    1660:	76 95       	lsr	r23
    1662:	67 95       	ror	r22
    1664:	57 95       	ror	r21
    1666:	47 95       	ror	r20
    1668:	0a 94       	dec	r0
    166a:	d2 f7       	brpl	.-12     	; 0x1660 <__pack_f+0x7e>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	04 c0       	rjmp	.+8      	; 0x167e <__pack_f+0x9c>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	aa 1f       	adc	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	2a 95       	dec	r18
    1680:	d2 f7       	brpl	.-12     	; 0x1676 <__pack_f+0x94>
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	a1 09       	sbc	r26, r1
    1686:	b1 09       	sbc	r27, r1
    1688:	8e 21       	and	r24, r14
    168a:	9f 21       	and	r25, r15
    168c:	a0 23       	and	r26, r16
    168e:	b1 23       	and	r27, r17
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	a1 05       	cpc	r26, r1
    1694:	b1 05       	cpc	r27, r1
    1696:	21 f0       	breq	.+8      	; 0x16a0 <__pack_f+0xbe>
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a0 e0       	ldi	r26, 0x00	; 0
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	9a 01       	movw	r18, r20
    16a2:	ab 01       	movw	r20, r22
    16a4:	28 2b       	or	r18, r24
    16a6:	39 2b       	or	r19, r25
    16a8:	4a 2b       	or	r20, r26
    16aa:	5b 2b       	or	r21, r27
    16ac:	da 01       	movw	r26, r20
    16ae:	c9 01       	movw	r24, r18
    16b0:	8f 77       	andi	r24, 0x7F	; 127
    16b2:	90 70       	andi	r25, 0x00	; 0
    16b4:	a0 70       	andi	r26, 0x00	; 0
    16b6:	b0 70       	andi	r27, 0x00	; 0
    16b8:	80 34       	cpi	r24, 0x40	; 64
    16ba:	91 05       	cpc	r25, r1
    16bc:	a1 05       	cpc	r26, r1
    16be:	b1 05       	cpc	r27, r1
    16c0:	39 f4       	brne	.+14     	; 0x16d0 <__pack_f+0xee>
    16c2:	27 ff       	sbrs	r18, 7
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <__pack_f+0xf6>
    16c6:	20 5c       	subi	r18, 0xC0	; 192
    16c8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ca:	4f 4f       	sbci	r20, 0xFF	; 255
    16cc:	5f 4f       	sbci	r21, 0xFF	; 255
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <__pack_f+0xf6>
    16d0:	21 5c       	subi	r18, 0xC1	; 193
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	4f 4f       	sbci	r20, 0xFF	; 255
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	e0 e0       	ldi	r30, 0x00	; 0
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	20 30       	cpi	r18, 0x00	; 0
    16de:	a0 e0       	ldi	r26, 0x00	; 0
    16e0:	3a 07       	cpc	r19, r26
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	4a 07       	cpc	r20, r26
    16e6:	a0 e4       	ldi	r26, 0x40	; 64
    16e8:	5a 07       	cpc	r21, r26
    16ea:	10 f0       	brcs	.+4      	; 0x16f0 <__pack_f+0x10e>
    16ec:	e1 e0       	ldi	r30, 0x01	; 1
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	79 01       	movw	r14, r18
    16f2:	8a 01       	movw	r16, r20
    16f4:	27 c0       	rjmp	.+78     	; 0x1744 <__pack_f+0x162>
    16f6:	60 38       	cpi	r22, 0x80	; 128
    16f8:	71 05       	cpc	r23, r1
    16fa:	64 f5       	brge	.+88     	; 0x1754 <__pack_f+0x172>
    16fc:	fb 01       	movw	r30, r22
    16fe:	e1 58       	subi	r30, 0x81	; 129
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	d8 01       	movw	r26, r16
    1704:	c7 01       	movw	r24, r14
    1706:	8f 77       	andi	r24, 0x7F	; 127
    1708:	90 70       	andi	r25, 0x00	; 0
    170a:	a0 70       	andi	r26, 0x00	; 0
    170c:	b0 70       	andi	r27, 0x00	; 0
    170e:	80 34       	cpi	r24, 0x40	; 64
    1710:	91 05       	cpc	r25, r1
    1712:	a1 05       	cpc	r26, r1
    1714:	b1 05       	cpc	r27, r1
    1716:	39 f4       	brne	.+14     	; 0x1726 <__pack_f+0x144>
    1718:	e7 fe       	sbrs	r14, 7
    171a:	0d c0       	rjmp	.+26     	; 0x1736 <__pack_f+0x154>
    171c:	80 e4       	ldi	r24, 0x40	; 64
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__pack_f+0x14c>
    1726:	8f e3       	ldi	r24, 0x3F	; 63
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a0 e0       	ldi	r26, 0x00	; 0
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e8 0e       	add	r14, r24
    1730:	f9 1e       	adc	r15, r25
    1732:	0a 1f       	adc	r16, r26
    1734:	1b 1f       	adc	r17, r27
    1736:	17 ff       	sbrs	r17, 7
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <__pack_f+0x162>
    173a:	16 95       	lsr	r17
    173c:	07 95       	ror	r16
    173e:	f7 94       	ror	r15
    1740:	e7 94       	ror	r14
    1742:	31 96       	adiw	r30, 0x01	; 1
    1744:	87 e0       	ldi	r24, 0x07	; 7
    1746:	16 95       	lsr	r17
    1748:	07 95       	ror	r16
    174a:	f7 94       	ror	r15
    174c:	e7 94       	ror	r14
    174e:	8a 95       	dec	r24
    1750:	d1 f7       	brne	.-12     	; 0x1746 <__pack_f+0x164>
    1752:	05 c0       	rjmp	.+10     	; 0x175e <__pack_f+0x17c>
    1754:	ee 24       	eor	r14, r14
    1756:	ff 24       	eor	r15, r15
    1758:	87 01       	movw	r16, r14
    175a:	ef ef       	ldi	r30, 0xFF	; 255
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	6e 2f       	mov	r22, r30
    1760:	67 95       	ror	r22
    1762:	66 27       	eor	r22, r22
    1764:	67 95       	ror	r22
    1766:	90 2f       	mov	r25, r16
    1768:	9f 77       	andi	r25, 0x7F	; 127
    176a:	d7 94       	ror	r13
    176c:	dd 24       	eor	r13, r13
    176e:	d7 94       	ror	r13
    1770:	8e 2f       	mov	r24, r30
    1772:	86 95       	lsr	r24
    1774:	49 2f       	mov	r20, r25
    1776:	46 2b       	or	r20, r22
    1778:	58 2f       	mov	r21, r24
    177a:	5d 29       	or	r21, r13
    177c:	b7 01       	movw	r22, r14
    177e:	ca 01       	movw	r24, r20
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	df 90       	pop	r13
    178a:	08 95       	ret

0000178c <__unpack_f>:
    178c:	fc 01       	movw	r30, r24
    178e:	db 01       	movw	r26, r22
    1790:	40 81       	ld	r20, Z
    1792:	51 81       	ldd	r21, Z+1	; 0x01
    1794:	22 81       	ldd	r18, Z+2	; 0x02
    1796:	62 2f       	mov	r22, r18
    1798:	6f 77       	andi	r22, 0x7F	; 127
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	22 1f       	adc	r18, r18
    179e:	22 27       	eor	r18, r18
    17a0:	22 1f       	adc	r18, r18
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	89 2f       	mov	r24, r25
    17a6:	88 0f       	add	r24, r24
    17a8:	82 2b       	or	r24, r18
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	99 1f       	adc	r25, r25
    17b0:	99 27       	eor	r25, r25
    17b2:	99 1f       	adc	r25, r25
    17b4:	11 96       	adiw	r26, 0x01	; 1
    17b6:	9c 93       	st	X, r25
    17b8:	11 97       	sbiw	r26, 0x01	; 1
    17ba:	21 15       	cp	r18, r1
    17bc:	31 05       	cpc	r19, r1
    17be:	a9 f5       	brne	.+106    	; 0x182a <__unpack_f+0x9e>
    17c0:	41 15       	cp	r20, r1
    17c2:	51 05       	cpc	r21, r1
    17c4:	61 05       	cpc	r22, r1
    17c6:	71 05       	cpc	r23, r1
    17c8:	11 f4       	brne	.+4      	; 0x17ce <__unpack_f+0x42>
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	37 c0       	rjmp	.+110    	; 0x183c <__unpack_f+0xb0>
    17ce:	82 e8       	ldi	r24, 0x82	; 130
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	13 96       	adiw	r26, 0x03	; 3
    17d4:	9c 93       	st	X, r25
    17d6:	8e 93       	st	-X, r24
    17d8:	12 97       	sbiw	r26, 0x02	; 2
    17da:	9a 01       	movw	r18, r20
    17dc:	ab 01       	movw	r20, r22
    17de:	67 e0       	ldi	r22, 0x07	; 7
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	44 1f       	adc	r20, r20
    17e6:	55 1f       	adc	r21, r21
    17e8:	6a 95       	dec	r22
    17ea:	d1 f7       	brne	.-12     	; 0x17e0 <__unpack_f+0x54>
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	8c 93       	st	X, r24
    17f0:	0d c0       	rjmp	.+26     	; 0x180c <__unpack_f+0x80>
    17f2:	22 0f       	add	r18, r18
    17f4:	33 1f       	adc	r19, r19
    17f6:	44 1f       	adc	r20, r20
    17f8:	55 1f       	adc	r21, r21
    17fa:	12 96       	adiw	r26, 0x02	; 2
    17fc:	8d 91       	ld	r24, X+
    17fe:	9c 91       	ld	r25, X
    1800:	13 97       	sbiw	r26, 0x03	; 3
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	13 96       	adiw	r26, 0x03	; 3
    1806:	9c 93       	st	X, r25
    1808:	8e 93       	st	-X, r24
    180a:	12 97       	sbiw	r26, 0x02	; 2
    180c:	20 30       	cpi	r18, 0x00	; 0
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	38 07       	cpc	r19, r24
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	48 07       	cpc	r20, r24
    1816:	80 e4       	ldi	r24, 0x40	; 64
    1818:	58 07       	cpc	r21, r24
    181a:	58 f3       	brcs	.-42     	; 0x17f2 <__unpack_f+0x66>
    181c:	14 96       	adiw	r26, 0x04	; 4
    181e:	2d 93       	st	X+, r18
    1820:	3d 93       	st	X+, r19
    1822:	4d 93       	st	X+, r20
    1824:	5c 93       	st	X, r21
    1826:	17 97       	sbiw	r26, 0x07	; 7
    1828:	08 95       	ret
    182a:	2f 3f       	cpi	r18, 0xFF	; 255
    182c:	31 05       	cpc	r19, r1
    182e:	79 f4       	brne	.+30     	; 0x184e <__unpack_f+0xc2>
    1830:	41 15       	cp	r20, r1
    1832:	51 05       	cpc	r21, r1
    1834:	61 05       	cpc	r22, r1
    1836:	71 05       	cpc	r23, r1
    1838:	19 f4       	brne	.+6      	; 0x1840 <__unpack_f+0xb4>
    183a:	84 e0       	ldi	r24, 0x04	; 4
    183c:	8c 93       	st	X, r24
    183e:	08 95       	ret
    1840:	64 ff       	sbrs	r22, 4
    1842:	03 c0       	rjmp	.+6      	; 0x184a <__unpack_f+0xbe>
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	8c 93       	st	X, r24
    1848:	12 c0       	rjmp	.+36     	; 0x186e <__unpack_f+0xe2>
    184a:	1c 92       	st	X, r1
    184c:	10 c0       	rjmp	.+32     	; 0x186e <__unpack_f+0xe2>
    184e:	2f 57       	subi	r18, 0x7F	; 127
    1850:	30 40       	sbci	r19, 0x00	; 0
    1852:	13 96       	adiw	r26, 0x03	; 3
    1854:	3c 93       	st	X, r19
    1856:	2e 93       	st	-X, r18
    1858:	12 97       	sbiw	r26, 0x02	; 2
    185a:	83 e0       	ldi	r24, 0x03	; 3
    185c:	8c 93       	st	X, r24
    185e:	87 e0       	ldi	r24, 0x07	; 7
    1860:	44 0f       	add	r20, r20
    1862:	55 1f       	adc	r21, r21
    1864:	66 1f       	adc	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	8a 95       	dec	r24
    186a:	d1 f7       	brne	.-12     	; 0x1860 <__unpack_f+0xd4>
    186c:	70 64       	ori	r23, 0x40	; 64
    186e:	14 96       	adiw	r26, 0x04	; 4
    1870:	4d 93       	st	X+, r20
    1872:	5d 93       	st	X+, r21
    1874:	6d 93       	st	X+, r22
    1876:	7c 93       	st	X, r23
    1878:	17 97       	sbiw	r26, 0x07	; 7
    187a:	08 95       	ret

0000187c <__fpcmp_parts_f>:
    187c:	1f 93       	push	r17
    187e:	dc 01       	movw	r26, r24
    1880:	fb 01       	movw	r30, r22
    1882:	9c 91       	ld	r25, X
    1884:	92 30       	cpi	r25, 0x02	; 2
    1886:	08 f4       	brcc	.+2      	; 0x188a <__fpcmp_parts_f+0xe>
    1888:	47 c0       	rjmp	.+142    	; 0x1918 <__fpcmp_parts_f+0x9c>
    188a:	80 81       	ld	r24, Z
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	08 f4       	brcc	.+2      	; 0x1892 <__fpcmp_parts_f+0x16>
    1890:	43 c0       	rjmp	.+134    	; 0x1918 <__fpcmp_parts_f+0x9c>
    1892:	94 30       	cpi	r25, 0x04	; 4
    1894:	51 f4       	brne	.+20     	; 0x18aa <__fpcmp_parts_f+0x2e>
    1896:	11 96       	adiw	r26, 0x01	; 1
    1898:	1c 91       	ld	r17, X
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	99 f5       	brne	.+102    	; 0x1904 <__fpcmp_parts_f+0x88>
    189e:	81 81       	ldd	r24, Z+1	; 0x01
    18a0:	68 2f       	mov	r22, r24
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	61 1b       	sub	r22, r17
    18a6:	71 09       	sbc	r23, r1
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <__fpcmp_parts_f+0xac>
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	21 f0       	breq	.+8      	; 0x18b6 <__fpcmp_parts_f+0x3a>
    18ae:	92 30       	cpi	r25, 0x02	; 2
    18b0:	31 f4       	brne	.+12     	; 0x18be <__fpcmp_parts_f+0x42>
    18b2:	82 30       	cpi	r24, 0x02	; 2
    18b4:	b9 f1       	breq	.+110    	; 0x1924 <__fpcmp_parts_f+0xa8>
    18b6:	81 81       	ldd	r24, Z+1	; 0x01
    18b8:	88 23       	and	r24, r24
    18ba:	89 f1       	breq	.+98     	; 0x191e <__fpcmp_parts_f+0xa2>
    18bc:	2d c0       	rjmp	.+90     	; 0x1918 <__fpcmp_parts_f+0x9c>
    18be:	11 96       	adiw	r26, 0x01	; 1
    18c0:	1c 91       	ld	r17, X
    18c2:	11 97       	sbiw	r26, 0x01	; 1
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	f1 f0       	breq	.+60     	; 0x1904 <__fpcmp_parts_f+0x88>
    18c8:	81 81       	ldd	r24, Z+1	; 0x01
    18ca:	18 17       	cp	r17, r24
    18cc:	d9 f4       	brne	.+54     	; 0x1904 <__fpcmp_parts_f+0x88>
    18ce:	12 96       	adiw	r26, 0x02	; 2
    18d0:	2d 91       	ld	r18, X+
    18d2:	3c 91       	ld	r19, X
    18d4:	13 97       	sbiw	r26, 0x03	; 3
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	82 17       	cp	r24, r18
    18dc:	93 07       	cpc	r25, r19
    18de:	94 f0       	brlt	.+36     	; 0x1904 <__fpcmp_parts_f+0x88>
    18e0:	28 17       	cp	r18, r24
    18e2:	39 07       	cpc	r19, r25
    18e4:	bc f0       	brlt	.+46     	; 0x1914 <__fpcmp_parts_f+0x98>
    18e6:	14 96       	adiw	r26, 0x04	; 4
    18e8:	8d 91       	ld	r24, X+
    18ea:	9d 91       	ld	r25, X+
    18ec:	0d 90       	ld	r0, X+
    18ee:	bc 91       	ld	r27, X
    18f0:	a0 2d       	mov	r26, r0
    18f2:	24 81       	ldd	r18, Z+4	; 0x04
    18f4:	35 81       	ldd	r19, Z+5	; 0x05
    18f6:	46 81       	ldd	r20, Z+6	; 0x06
    18f8:	57 81       	ldd	r21, Z+7	; 0x07
    18fa:	28 17       	cp	r18, r24
    18fc:	39 07       	cpc	r19, r25
    18fe:	4a 07       	cpc	r20, r26
    1900:	5b 07       	cpc	r21, r27
    1902:	18 f4       	brcc	.+6      	; 0x190a <__fpcmp_parts_f+0x8e>
    1904:	11 23       	and	r17, r17
    1906:	41 f0       	breq	.+16     	; 0x1918 <__fpcmp_parts_f+0x9c>
    1908:	0a c0       	rjmp	.+20     	; 0x191e <__fpcmp_parts_f+0xa2>
    190a:	82 17       	cp	r24, r18
    190c:	93 07       	cpc	r25, r19
    190e:	a4 07       	cpc	r26, r20
    1910:	b5 07       	cpc	r27, r21
    1912:	40 f4       	brcc	.+16     	; 0x1924 <__fpcmp_parts_f+0xa8>
    1914:	11 23       	and	r17, r17
    1916:	19 f0       	breq	.+6      	; 0x191e <__fpcmp_parts_f+0xa2>
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <__fpcmp_parts_f+0xac>
    191e:	6f ef       	ldi	r22, 0xFF	; 255
    1920:	7f ef       	ldi	r23, 0xFF	; 255
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <__fpcmp_parts_f+0xac>
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	cb 01       	movw	r24, r22
    192a:	1f 91       	pop	r17
    192c:	08 95       	ret

0000192e <main>:

/******************************************************************************
 *								Main                                          *
 *******************************************************************************/
int main()
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <main+0x6>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
	/*enable the global interrupt enable bit*/
	SREG|=(1<<7);
    1938:	af e5       	ldi	r26, 0x5F	; 95
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	ef e5       	ldi	r30, 0x5F	; 95
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	80 68       	ori	r24, 0x80	; 128
    1944:	8c 93       	st	X, r24
	UART_init(&g_UartMc2);/*initiate the UART driver of micro 2*/
    1946:	8a e6       	ldi	r24, 0x6A	; 106
    1948:	91 e0       	ldi	r25, 0x01	; 1
    194a:	0e 94 44 18 	call	0x3088	; 0x3088 <UART_init>
	TWI_init(&g_Twi);/*initiate the i2c driver*/
    194e:	85 e7       	ldi	r24, 0x75	; 117
    1950:	91 e0       	ldi	r25, 0x01	; 1
    1952:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <TWI_init>
	BUZZER_init();/*initiate the buzzer driver*/
    1956:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <BUZZER_init>
	DcMotor_Init();/*initiate the DC motor driver*/
    195a:	0e 94 0b 10 	call	0x2016	; 0x2016 <DcMotor_Init>
	TIMER1_setCallBack(timerCounter);/*set the call-back function to handle the interrupt*/
    195e:	86 ed       	ldi	r24, 0xD6	; 214
    1960:	9f e0       	ldi	r25, 0x0F	; 15
    1962:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <TIMER1_setCallBack>
	while(UART_recieveByte() != MC2_READY){}/*receive the byte and insure the synchronization*/
    1966:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <UART_recieveByte>
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	e1 f7       	brne	.-8      	; 0x1966 <main+0x38>
	checkNewPassword();/*check the send password from micro 1*/
    196e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <checkNewPassword>
	 *******************************************************************************/
	while(1)
	{
		/*switch case to execute depending on the current state*/

		switch (g_state)
    1972:	80 91 9e 01 	lds	r24, 0x019E
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	3a 83       	std	Y+2, r19	; 0x02
    197c:	29 83       	std	Y+1, r18	; 0x01
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	84 3f       	cpi	r24, 0xF4	; 244
    1984:	91 05       	cpc	r25, r1
    1986:	89 f1       	breq	.+98     	; 0x19ea <main+0xbc>
    1988:	29 81       	ldd	r18, Y+1	; 0x01
    198a:	3a 81       	ldd	r19, Y+2	; 0x02
    198c:	25 3f       	cpi	r18, 0xF5	; 245
    198e:	31 05       	cpc	r19, r1
    1990:	84 f4       	brge	.+32     	; 0x19b2 <main+0x84>
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	82 3f       	cpi	r24, 0xF2	; 242
    1998:	91 05       	cpc	r25, r1
    199a:	81 f1       	breq	.+96     	; 0x19fc <main+0xce>
    199c:	29 81       	ldd	r18, Y+1	; 0x01
    199e:	3a 81       	ldd	r19, Y+2	; 0x02
    19a0:	23 3f       	cpi	r18, 0xF3	; 243
    19a2:	31 05       	cpc	r19, r1
    19a4:	b4 f4       	brge	.+44     	; 0x19d2 <main+0xa4>
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	81 3f       	cpi	r24, 0xF1	; 241
    19ac:	91 05       	cpc	r25, r1
    19ae:	01 f1       	breq	.+64     	; 0x19f0 <main+0xc2>
    19b0:	e0 cf       	rjmp	.-64     	; 0x1972 <main+0x44>
    19b2:	29 81       	ldd	r18, Y+1	; 0x01
    19b4:	3a 81       	ldd	r19, Y+2	; 0x02
    19b6:	27 3f       	cpi	r18, 0xF7	; 247
    19b8:	31 05       	cpc	r19, r1
    19ba:	31 f1       	breq	.+76     	; 0x1a08 <main+0xda>
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	89 3f       	cpi	r24, 0xF9	; 249
    19c2:	91 05       	cpc	r25, r1
    19c4:	f1 f0       	breq	.+60     	; 0x1a02 <main+0xd4>
    19c6:	29 81       	ldd	r18, Y+1	; 0x01
    19c8:	3a 81       	ldd	r19, Y+2	; 0x02
    19ca:	25 3f       	cpi	r18, 0xF5	; 245
    19cc:	31 05       	cpc	r19, r1
    19ce:	99 f0       	breq	.+38     	; 0x19f6 <main+0xc8>
    19d0:	d0 cf       	rjmp	.-96     	; 0x1972 <main+0x44>
		{
		case MAIN_OPTIONS:
			/*receive the chosen option from the mc1 */
			KEY=UART_recieveByte();
    19d2:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <UART_recieveByte>
    19d6:	80 93 98 01 	sts	0x0198, r24
			g_state=ENTER_YOUR_PASSWORD;
    19da:	84 ef       	ldi	r24, 0xF4	; 244
    19dc:	80 93 9e 01 	sts	0x019E, r24
			UART_sendByte(g_state);
    19e0:	80 91 9e 01 	lds	r24, 0x019E
    19e4:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
    19e8:	c4 cf       	rjmp	.-120    	; 0x1972 <main+0x44>
			break;
		case ENTER_YOUR_PASSWORD:
			/*check on the entered password*/
			checkPassword();
    19ea:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <checkPassword>
    19ee:	c1 cf       	rjmp	.-126    	; 0x1972 <main+0x44>
			break;
		case MATCH:
			/*chose the option using the received key*/
			mainOptionsChosen();
    19f0:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <mainOptionsChosen>
    19f4:	be cf       	rjmp	.-132    	; 0x1972 <main+0x44>
			break;
		case DOOR_OPENING:
			/*open the door(motor)*/
			DoorMechanism();
    19f6:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DoorMechanism>
    19fa:	bb cf       	rjmp	.-138    	; 0x1972 <main+0x44>
			break;
		case ENTER_NEW_PASSWORD:
			/*check on the password if the user want to set it */
			checkNewPassword();
    19fc:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <checkNewPassword>
    1a00:	b8 cf       	rjmp	.-144    	; 0x1972 <main+0x44>
			break;
		case WARNING:
			/*password is set wrong for three times*/
			buzzerAlarm();
    1a02:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <buzzerAlarm>
    1a06:	b5 cf       	rjmp	.-150    	; 0x1972 <main+0x44>
			break;
			/* mismatch in case of entered wrong password */
		case MISMATCH:
			checkPassword();
    1a08:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <checkPassword>
    1a0c:	b2 cf       	rjmp	.-156    	; 0x1972 <main+0x44>

00001a0e <checkNewPassword>:
 * then take the second array in the same way
 * compared two password if they are the same store it in the eeprom
 * if wrong put the g_state =mismatch to ask the user to set the password once again
 */
uint8  checkNewPassword()
{
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <checkNewPassword+0xa>
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <checkNewPassword+0xc>
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
	for(uint8 i=0;i<5;i++)
    1a1e:	1b 82       	std	Y+3, r1	; 0x03
    1a20:	0c c0       	rjmp	.+24     	; 0x1a3a <checkNewPassword+0x2c>
	{
		/*receiving password for the first time*/
		g_recivedIntialPassword[i]=UART_recieveByte();
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	08 2f       	mov	r16, r24
    1a26:	10 e0       	ldi	r17, 0x00	; 0
    1a28:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <UART_recieveByte>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	e7 56       	subi	r30, 0x67	; 103
    1a30:	fe 4f       	sbci	r31, 0xFE	; 254
    1a32:	80 83       	st	Z, r24
 * compared two password if they are the same store it in the eeprom
 * if wrong put the g_state =mismatch to ask the user to set the password once again
 */
uint8  checkNewPassword()
{
	for(uint8 i=0;i<5;i++)
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	8f 5f       	subi	r24, 0xFF	; 255
    1a38:	8b 83       	std	Y+3, r24	; 0x03
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	85 30       	cpi	r24, 0x05	; 5
    1a3e:	88 f3       	brcs	.-30     	; 0x1a22 <checkNewPassword+0x14>
	{
		/*receiving password for the first time*/
		g_recivedIntialPassword[i]=UART_recieveByte();
	}
	for(uint8 i =0;i<PASS_LENGTH;i++)
    1a40:	1a 82       	std	Y+2, r1	; 0x02
    1a42:	0c c0       	rjmp	.+24     	; 0x1a5c <checkNewPassword+0x4e>
	{
		/*receiving password for the second time*/
		g_recivedReenterdPassword[i]=UART_recieveByte();
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	08 2f       	mov	r16, r24
    1a48:	10 e0       	ldi	r17, 0x00	; 0
    1a4a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <UART_recieveByte>
    1a4e:	f8 01       	movw	r30, r16
    1a50:	e2 57       	subi	r30, 0x72	; 114
    1a52:	fe 4f       	sbci	r31, 0xFE	; 254
    1a54:	80 83       	st	Z, r24
	for(uint8 i=0;i<5;i++)
	{
		/*receiving password for the first time*/
		g_recivedIntialPassword[i]=UART_recieveByte();
	}
	for(uint8 i =0;i<PASS_LENGTH;i++)
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	8f 5f       	subi	r24, 0xFF	; 255
    1a5a:	8a 83       	std	Y+2, r24	; 0x02
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	85 30       	cpi	r24, 0x05	; 5
    1a60:	88 f3       	brcs	.-30     	; 0x1a44 <checkNewPassword+0x36>
	{
		/*receiving password for the second time*/
		g_recivedReenterdPassword[i]=UART_recieveByte();
	}
	for(uint8 i=0;i<PASS_LENGTH;i++)
    1a62:	19 82       	std	Y+1, r1	; 0x01
    1a64:	1e c0       	rjmp	.+60     	; 0x1aa2 <checkNewPassword+0x94>
	{
		/*check if both arrays are the same*/
		if(g_recivedIntialPassword[i]!=g_recivedReenterdPassword[i])
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	e7 56       	subi	r30, 0x67	; 103
    1a70:	fe 4f       	sbci	r31, 0xFE	; 254
    1a72:	20 81       	ld	r18, Z
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	e2 57       	subi	r30, 0x72	; 114
    1a7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a80:	80 81       	ld	r24, Z
    1a82:	28 17       	cp	r18, r24
    1a84:	59 f0       	breq	.+22     	; 0x1a9c <checkNewPassword+0x8e>
		{
			g_state=MISMATCH;/*wrong password */
    1a86:	87 ef       	ldi	r24, 0xF7	; 247
    1a88:	80 93 9e 01 	sts	0x019E, r24
			UART_sendByte(g_state);/*send the current state to micro 1*/
    1a8c:	80 91 9e 01 	lds	r24, 0x019E
    1a90:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
			checkNewPassword();/*call same function to try again*/
    1a94:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <checkNewPassword>
			return 0;/*terminate the function*/
    1a98:	1c 82       	std	Y+4, r1	; 0x04
    1a9a:	19 c0       	rjmp	.+50     	; 0x1ace <checkNewPassword+0xc0>
	for(uint8 i =0;i<PASS_LENGTH;i++)
	{
		/*receiving password for the second time*/
		g_recivedReenterdPassword[i]=UART_recieveByte();
	}
	for(uint8 i=0;i<PASS_LENGTH;i++)
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	8f 5f       	subi	r24, 0xFF	; 255
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	85 30       	cpi	r24, 0x05	; 5
    1aa6:	f8 f2       	brcs	.-66     	; 0x1a66 <checkNewPassword+0x58>
			UART_sendByte(g_state);/*send the current state to micro 1*/
			checkNewPassword();/*call same function to try again*/
			return 0;/*terminate the function*/
		}
	}
	savePasswordInEEPROM((uint8 *)&g_recivedIntialPassword);/*save the new pass in memmory*/
    1aa8:	89 e9       	ldi	r24, 0x99	; 153
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <savePasswordInEEPROM>
	g_state=MATCH;/*correct password */
    1ab0:	81 ef       	ldi	r24, 0xF1	; 241
    1ab2:	80 93 9e 01 	sts	0x019E, r24
	UART_sendByte(g_state);/*send the current state to micro 1*/
    1ab6:	80 91 9e 01 	lds	r24, 0x019E
    1aba:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
	g_state=MAIN_OPTIONS;/*after setting the password enter the main options*/
    1abe:	83 ef       	ldi	r24, 0xF3	; 243
    1ac0:	80 93 9e 01 	sts	0x019E, r24
	UART_sendByte(g_state);/*send the current state to micro 1*/
    1ac4:	80 91 9e 01 	lds	r24, 0x019E
    1ac8:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
	return 0;
    1acc:	1c 82       	std	Y+4, r1	; 0x04
    1ace:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	08 95       	ret

00001ae2 <checkPassword>:
 * execute the action which user has been chosen
 * if wrong ask him to enter the password again
 * if wrong for three times put the state = warning
 */
uint8 checkPassword(void)
{
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	2d 97       	sbiw	r28, 0x0d	; 13
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
	uint8 recievedPassword[PASS_LENGTH];/*array to save the entered password in it*/
	uint8 Password[PASS_LENGTH];/*array to get the current password in it from eeprom*/
	for(uint8 j=0;j<PASS_LENGTH;j++)
    1afa:	1a 82       	std	Y+2, r1	; 0x02
    1afc:	0f c0       	rjmp	.+30     	; 0x1b1c <checkPassword+0x3a>
	{
		/*receiving password */
		recievedPassword[j]=UART_recieveByte();/*storing the entered password*/
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	08 2f       	mov	r16, r24
    1b02:	10 e0       	ldi	r17, 0x00	; 0
    1b04:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <UART_recieveByte>
    1b08:	28 2f       	mov	r18, r24
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	03 96       	adiw	r24, 0x03	; 3
    1b0e:	fc 01       	movw	r30, r24
    1b10:	e0 0f       	add	r30, r16
    1b12:	f1 1f       	adc	r31, r17
    1b14:	20 83       	st	Z, r18
 */
uint8 checkPassword(void)
{
	uint8 recievedPassword[PASS_LENGTH];/*array to save the entered password in it*/
	uint8 Password[PASS_LENGTH];/*array to get the current password in it from eeprom*/
	for(uint8 j=0;j<PASS_LENGTH;j++)
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	8f 5f       	subi	r24, 0xFF	; 255
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	85 30       	cpi	r24, 0x05	; 5
    1b20:	70 f3       	brcs	.-36     	; 0x1afe <checkPassword+0x1c>
	{
		/*receiving password */
		recievedPassword[j]=UART_recieveByte();/*storing the entered password*/
	}
	readPasswordFromEEPROM((uint8 *)&Password);/*read password from eeprom to compare it with entered one*/
    1b22:	ce 01       	movw	r24, r28
    1b24:	08 96       	adiw	r24, 0x08	; 8
    1b26:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <readPasswordFromEEPROM>

	for(uint8 j=0;j<PASS_LENGTH;j++)
    1b2a:	19 82       	std	Y+1, r1	; 0x01
    1b2c:	4a c0       	rjmp	.+148    	; 0x1bc2 <checkPassword+0xe0>
	{/*compare the two arrays*/
		if(recievedPassword[j]==Password[j])
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	ce 01       	movw	r24, r28
    1b36:	03 96       	adiw	r24, 0x03	; 3
    1b38:	fc 01       	movw	r30, r24
    1b3a:	e2 0f       	add	r30, r18
    1b3c:	f3 1f       	adc	r31, r19
    1b3e:	40 81       	ld	r20, Z
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	ce 01       	movw	r24, r28
    1b48:	08 96       	adiw	r24, 0x08	; 8
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	e2 0f       	add	r30, r18
    1b4e:	f3 1f       	adc	r31, r19
    1b50:	80 81       	ld	r24, Z
    1b52:	48 17       	cp	r20, r24
    1b54:	99 f1       	breq	.+102    	; 0x1bbc <checkPassword+0xda>
		{
			continue;/*dont complete the current iteration of the for loop*/
		}
		else if(recievedPassword[j]!=Password[j])
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	03 96       	adiw	r24, 0x03	; 3
    1b60:	fc 01       	movw	r30, r24
    1b62:	e2 0f       	add	r30, r18
    1b64:	f3 1f       	adc	r31, r19
    1b66:	40 81       	ld	r20, Z
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	ce 01       	movw	r24, r28
    1b70:	08 96       	adiw	r24, 0x08	; 8
    1b72:	fc 01       	movw	r30, r24
    1b74:	e2 0f       	add	r30, r18
    1b76:	f3 1f       	adc	r31, r19
    1b78:	80 81       	ld	r24, Z
    1b7a:	48 17       	cp	r20, r24
    1b7c:	f9 f0       	breq	.+62     	; 0x1bbc <checkPassword+0xda>
		{/*if they are not the same increment the counter by 1*/
			if(mismatchCounter<2)
    1b7e:	80 91 86 01 	lds	r24, 0x0186
    1b82:	82 30       	cpi	r24, 0x02	; 2
    1b84:	70 f4       	brcc	.+28     	; 0x1ba2 <checkPassword+0xc0>
			{
				mismatchCounter++; /*increment the flag of the wrong password */
    1b86:	80 91 86 01 	lds	r24, 0x0186
    1b8a:	8f 5f       	subi	r24, 0xFF	; 255
    1b8c:	80 93 86 01 	sts	0x0186, r24
				g_state=MISMATCH; /*wrong password */
    1b90:	87 ef       	ldi	r24, 0xF7	; 247
    1b92:	80 93 9e 01 	sts	0x019E, r24
				UART_sendByte(g_state);/*send the mismatch flag to MC1_mainOptions*/
    1b96:	80 91 9e 01 	lds	r24, 0x019E
    1b9a:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
				return 0;
    1b9e:	1d 86       	std	Y+13, r1	; 0x0d
    1ba0:	1c c0       	rjmp	.+56     	; 0x1bda <checkPassword+0xf8>
			}
			else if(mismatchCounter==2)
    1ba2:	80 91 86 01 	lds	r24, 0x0186
    1ba6:	82 30       	cpi	r24, 0x02	; 2
    1ba8:	49 f4       	brne	.+18     	; 0x1bbc <checkPassword+0xda>
			{
				/*if the password was entered wrong for 3 times*/
				g_state=WARNING;
    1baa:	89 ef       	ldi	r24, 0xF9	; 249
    1bac:	80 93 9e 01 	sts	0x019E, r24
				UART_sendByte(g_state);
    1bb0:	80 91 9e 01 	lds	r24, 0x019E
    1bb4:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
				return 0;
    1bb8:	1d 86       	std	Y+13, r1	; 0x0d
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <checkPassword+0xf8>
		/*receiving password */
		recievedPassword[j]=UART_recieveByte();/*storing the entered password*/
	}
	readPasswordFromEEPROM((uint8 *)&Password);/*read password from eeprom to compare it with entered one*/

	for(uint8 j=0;j<PASS_LENGTH;j++)
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	8f 5f       	subi	r24, 0xFF	; 255
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	85 30       	cpi	r24, 0x05	; 5
    1bc6:	08 f4       	brcc	.+2      	; 0x1bca <checkPassword+0xe8>
    1bc8:	b2 cf       	rjmp	.-156    	; 0x1b2e <checkPassword+0x4c>
				UART_sendByte(g_state);
				return 0;
			}
		}
	}
	g_state=MATCH;
    1bca:	81 ef       	ldi	r24, 0xF1	; 241
    1bcc:	80 93 9e 01 	sts	0x019E, r24
	UART_sendByte(g_state);/*send the match flag to MC1_mainOptions*/
    1bd0:	80 91 9e 01 	lds	r24, 0x019E
    1bd4:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
	return 0;
    1bd8:	1d 86       	std	Y+13, r1	; 0x0d
    1bda:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    1bdc:	2d 96       	adiw	r28, 0x0d	; 13
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	08 95       	ret

00001bf2 <savePasswordInEEPROM>:
 * Description:
 *for loop looping on the elements of the password's array to store it
 *in the eeprom
 */
void  savePasswordInEEPROM(uint8 *a_passwordArr)
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	61 97       	sbiw	r28, 0x11	; 17
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	99 8b       	std	Y+17, r25	; 0x11
    1c08:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter;
	for(counter=0 ; counter < PASS_LENGTH ; counter++)
    1c0a:	1f 86       	std	Y+15, r1	; 0x0f
    1c0c:	87 c0       	rjmp	.+270    	; 0x1d1c <savePasswordInEEPROM+0x12a>
	{
		EEPROM_writeByte(PASSWORD_ADDRESS+counter,a_passwordArr[counter]);
    1c0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c10:	88 2f       	mov	r24, r24
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	06 96       	adiw	r24, 0x06	; 6
    1c16:	ac 01       	movw	r20, r24
    1c18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	88 89       	ldd	r24, Y+16	; 0x10
    1c20:	99 89       	ldd	r25, Y+17	; 0x11
    1c22:	fc 01       	movw	r30, r24
    1c24:	e2 0f       	add	r30, r18
    1c26:	f3 1f       	adc	r31, r19
    1c28:	20 81       	ld	r18, Z
    1c2a:	ca 01       	movw	r24, r20
    1c2c:	62 2f       	mov	r22, r18
    1c2e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <EEPROM_writeByte>
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a8 ec       	ldi	r26, 0xC8	; 200
    1c38:	b2 e4       	ldi	r27, 0x42	; 66
    1c3a:	8b 87       	std	Y+11, r24	; 0x0b
    1c3c:	9c 87       	std	Y+12, r25	; 0x0c
    1c3e:	ad 87       	std	Y+13, r26	; 0x0d
    1c40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	4a e7       	ldi	r20, 0x7A	; 122
    1c50:	53 e4       	ldi	r21, 0x43	; 67
    1c52:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	8f 83       	std	Y+7, r24	; 0x07
    1c5c:	98 87       	std	Y+8, r25	; 0x08
    1c5e:	a9 87       	std	Y+9, r26	; 0x09
    1c60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e8       	ldi	r20, 0x80	; 128
    1c70:	5f e3       	ldi	r21, 0x3F	; 63
    1c72:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1c76:	88 23       	and	r24, r24
    1c78:	2c f4       	brge	.+10     	; 0x1c84 <savePasswordInEEPROM+0x92>
		__ticks = 1;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
    1c82:	3f c0       	rjmp	.+126    	; 0x1d02 <savePasswordInEEPROM+0x110>
	else if (__tmp > 65535)
    1c84:	6f 81       	ldd	r22, Y+7	; 0x07
    1c86:	78 85       	ldd	r23, Y+8	; 0x08
    1c88:	89 85       	ldd	r24, Y+9	; 0x09
    1c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	3f ef       	ldi	r19, 0xFF	; 255
    1c90:	4f e7       	ldi	r20, 0x7F	; 127
    1c92:	57 e4       	ldi	r21, 0x47	; 71
    1c94:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1c98:	18 16       	cp	r1, r24
    1c9a:	4c f5       	brge	.+82     	; 0x1cee <savePasswordInEEPROM+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e2       	ldi	r20, 0x20	; 32
    1caa:	51 e4       	ldi	r21, 0x41	; 65
    1cac:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <savePasswordInEEPROM+0xf2>
    1cc6:	89 e1       	ldi	r24, 0x19	; 25
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <savePasswordInEEPROM+0xe0>
    1cd6:	9c 83       	std	Y+4, r25	; 0x04
    1cd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	69 f7       	brne	.-38     	; 0x1cc6 <savePasswordInEEPROM+0xd4>
    1cec:	14 c0       	rjmp	.+40     	; 0x1d16 <savePasswordInEEPROM+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	9e 83       	std	Y+6, r25	; 0x06
    1d00:	8d 83       	std	Y+5, r24	; 0x05
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <savePasswordInEEPROM+0x11c>
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
 *in the eeprom
 */
void  savePasswordInEEPROM(uint8 *a_passwordArr)
{
	uint8 counter;
	for(counter=0 ; counter < PASS_LENGTH ; counter++)
    1d16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d18:	8f 5f       	subi	r24, 0xFF	; 255
    1d1a:	8f 87       	std	Y+15, r24	; 0x0f
    1d1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d1e:	85 30       	cpi	r24, 0x05	; 5
    1d20:	08 f4       	brcc	.+2      	; 0x1d24 <savePasswordInEEPROM+0x132>
    1d22:	75 cf       	rjmp	.-278    	; 0x1c0e <savePasswordInEEPROM+0x1c>
	{
		EEPROM_writeByte(PASSWORD_ADDRESS+counter,a_passwordArr[counter]);
		_delay_ms(100);
	}
}
    1d24:	61 96       	adiw	r28, 0x11	; 17
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <readPasswordFromEEPROM>:
 * Description:
 *for loop looping on the elements of the array to get the password
 *from the eeprom
 */
void  readPasswordFromEEPROM(const uint8 *a_passwordSavedInEeprom)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	61 97       	sbiw	r28, 0x11	; 17
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	99 8b       	std	Y+17, r25	; 0x11
    1d4c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter;
	for(counter=0 ; counter < PASS_LENGTH ; counter++)
    1d4e:	1f 86       	std	Y+15, r1	; 0x0f
    1d50:	85 c0       	rjmp	.+266    	; 0x1e5c <readPasswordFromEEPROM+0x126>
	{
		EEPROM_readByte(PASSWORD_ADDRESS+counter,a_passwordSavedInEeprom+counter);
    1d52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	06 96       	adiw	r24, 0x06	; 6
    1d5a:	ac 01       	movw	r20, r24
    1d5c:	28 89       	ldd	r18, Y+16	; 0x10
    1d5e:	39 89       	ldd	r19, Y+17	; 0x11
    1d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d62:	88 2f       	mov	r24, r24
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	28 0f       	add	r18, r24
    1d68:	39 1f       	adc	r19, r25
    1d6a:	ca 01       	movw	r24, r20
    1d6c:	b9 01       	movw	r22, r18
    1d6e:	0e 94 b2 10 	call	0x2164	; 0x2164 <EEPROM_readByte>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a8 ec       	ldi	r26, 0xC8	; 200
    1d78:	b2 e4       	ldi	r27, 0x42	; 66
    1d7a:	8b 87       	std	Y+11, r24	; 0x0b
    1d7c:	9c 87       	std	Y+12, r25	; 0x0c
    1d7e:	ad 87       	std	Y+13, r26	; 0x0d
    1d80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a e7       	ldi	r20, 0x7A	; 122
    1d90:	53 e4       	ldi	r21, 0x43	; 67
    1d92:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8f 83       	std	Y+7, r24	; 0x07
    1d9c:	98 87       	std	Y+8, r25	; 0x08
    1d9e:	a9 87       	std	Y+9, r26	; 0x09
    1da0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	5f e3       	ldi	r21, 0x3F	; 63
    1db2:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <readPasswordFromEEPROM+0x8e>
		__ticks = 1;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	3f c0       	rjmp	.+126    	; 0x1e42 <readPasswordFromEEPROM+0x10c>
	else if (__tmp > 65535)
    1dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc6:	78 85       	ldd	r23, Y+8	; 0x08
    1dc8:	89 85       	ldd	r24, Y+9	; 0x09
    1dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	3f ef       	ldi	r19, 0xFF	; 255
    1dd0:	4f e7       	ldi	r20, 0x7F	; 127
    1dd2:	57 e4       	ldi	r21, 0x47	; 71
    1dd4:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1dd8:	18 16       	cp	r1, r24
    1dda:	4c f5       	brge	.+82     	; 0x1e2e <readPasswordFromEEPROM+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e2       	ldi	r20, 0x20	; 32
    1dea:	51 e4       	ldi	r21, 0x41	; 65
    1dec:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <readPasswordFromEEPROM+0xee>
    1e06:	89 e1       	ldi	r24, 0x19	; 25
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9c 83       	std	Y+4, r25	; 0x04
    1e0c:	8b 83       	std	Y+3, r24	; 0x03
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <readPasswordFromEEPROM+0xdc>
    1e16:	9c 83       	std	Y+4, r25	; 0x04
    1e18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	69 f7       	brne	.-38     	; 0x1e06 <readPasswordFromEEPROM+0xd0>
    1e2c:	14 c0       	rjmp	.+40     	; 0x1e56 <readPasswordFromEEPROM+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e30:	78 85       	ldd	r23, Y+8	; 0x08
    1e32:	89 85       	ldd	r24, Y+9	; 0x09
    1e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e36:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	9a 83       	std	Y+2, r25	; 0x02
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <readPasswordFromEEPROM+0x118>
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
 *from the eeprom
 */
void  readPasswordFromEEPROM(const uint8 *a_passwordSavedInEeprom)
{
	uint8 counter;
	for(counter=0 ; counter < PASS_LENGTH ; counter++)
    1e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e58:	8f 5f       	subi	r24, 0xFF	; 255
    1e5a:	8f 87       	std	Y+15, r24	; 0x0f
    1e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5e:	85 30       	cpi	r24, 0x05	; 5
    1e60:	08 f4       	brcc	.+2      	; 0x1e64 <readPasswordFromEEPROM+0x12e>
    1e62:	77 cf       	rjmp	.-274    	; 0x1d52 <readPasswordFromEEPROM+0x1c>
	{
		EEPROM_readByte(PASSWORD_ADDRESS+counter,a_passwordSavedInEeprom+counter);
		_delay_ms(100);
	}
}
    1e64:	61 96       	adiw	r28, 0x11	; 17
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <mainOptionsChosen>:
 * Description:
 *switch case on the key if it was + put the g_state=DOOR_OPENING
 *if it was - put the g_state=ENTER_NEW_PASSWORD
 */
void  mainOptionsChosen(void)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <mainOptionsChosen+0x6>
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
	switch(KEY)
    1e80:	80 91 98 01 	lds	r24, 0x0198
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	3a 83       	std	Y+2, r19	; 0x02
    1e8a:	29 83       	std	Y+1, r18	; 0x01
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	8b 32       	cpi	r24, 0x2B	; 43
    1e92:	91 05       	cpc	r25, r1
    1e94:	31 f0       	breq	.+12     	; 0x1ea2 <mainOptionsChosen+0x2c>
    1e96:	29 81       	ldd	r18, Y+1	; 0x01
    1e98:	3a 81       	ldd	r19, Y+2	; 0x02
    1e9a:	2d 32       	cpi	r18, 0x2D	; 45
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	49 f0       	breq	.+18     	; 0x1eb2 <mainOptionsChosen+0x3c>
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <mainOptionsChosen+0x4a>
	{
	case '+':
		g_state=DOOR_OPENING;
    1ea2:	85 ef       	ldi	r24, 0xF5	; 245
    1ea4:	80 93 9e 01 	sts	0x019E, r24
		UART_sendByte(g_state);/*send the DOOR_OPENING flag to mainOptions*/
    1ea8:	80 91 9e 01 	lds	r24, 0x019E
    1eac:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
    1eb0:	07 c0       	rjmp	.+14     	; 0x1ec0 <mainOptionsChosen+0x4a>
		break;
	case'-':

		g_state=ENTER_NEW_PASSWORD;
    1eb2:	82 ef       	ldi	r24, 0xF2	; 242
    1eb4:	80 93 9e 01 	sts	0x019E, r24
		UART_sendByte(g_state);/*send the ENTER_NEW_PASSWORD flag to mainOptions*/
    1eb8:	80 91 9e 01 	lds	r24, 0x019E
    1ebc:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
		break;
	}
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <DoorMechanism>:
 * then rotate the motor anti clockwise for 15 seconds and send the g_state
 * for the other mc
 */

void  DoorMechanism(void)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
	if(g_init_timer_motor==1)
    1ed2:	80 91 68 01 	lds	r24, 0x0168
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	31 f4       	brne	.+12     	; 0x1ee6 <DoorMechanism+0x1c>
	{
		TIMER_init(&g_timer); //Timer starts
    1eda:	88 e7       	ldi	r24, 0x78	; 120
    1edc:	91 e0       	ldi	r25, 0x01	; 1
    1ede:	0e 94 82 15 	call	0x2b04	; 0x2b04 <TIMER_init>
		g_init_timer_motor=0;
    1ee2:	10 92 68 01 	sts	0x0168, r1
	}
	/*
		 * state that opening
		 */
	DcMotor_Rotate(CLOCKWISE); // motor rotates clockwise (opens door)
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	0e 94 26 10 	call	0x204c	; 0x204c <DcMotor_Rotate>
	/*
	 * this while loop makes sure that this state is entered once at a time
	 * for 15 seconds
	 */
	while(g_secondes_counter <=15);
    1eec:	80 91 87 01 	lds	r24, 0x0187
    1ef0:	80 31       	cpi	r24, 0x10	; 16
    1ef2:	e0 f3       	brcs	.-8      	; 0x1eec <DoorMechanism+0x22>

	/*
	 * state that stops motor
	 */
	DcMotor_Rotate(STOP); //stop motor
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	0e 94 26 10 	call	0x204c	; 0x204c <DcMotor_Rotate>
	g_state = DOOR_IS_OPENED;
    1efa:	86 ef       	ldi	r24, 0xF6	; 246
    1efc:	80 93 9e 01 	sts	0x019E, r24
	UART_sendByte(g_state);/*send the DOOR_IS_OPENED flag to mainOptions*/
    1f00:	80 91 9e 01 	lds	r24, 0x019E
    1f04:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
	 * state = door is opened
	 * so in the while(1) loop the program will keep entering this state
	 * until it changes, so this while loop prevents program
	 * from entering the state more than once
	 */
	while(g_secondes_counter <=18);/*15+3 seconds*/
    1f08:	80 91 87 01 	lds	r24, 0x0187
    1f0c:	83 31       	cpi	r24, 0x13	; 19
    1f0e:	e0 f3       	brcs	.-8      	; 0x1f08 <DoorMechanism+0x3e>

	/*
	 * state that closes the door
	 */
	DcMotor_Rotate(ANTI_CLOCKWISE);
    1f10:	82 e0       	ldi	r24, 0x02	; 2
    1f12:	0e 94 26 10 	call	0x204c	; 0x204c <DcMotor_Rotate>
	g_state = DOOR_CLOSING;
    1f16:	88 ef       	ldi	r24, 0xF8	; 248
    1f18:	80 93 9e 01 	sts	0x019E, r24
	UART_sendByte(g_state);/*send the match flag to MC1_mainOptions*/
    1f1c:	80 91 9e 01 	lds	r24, 0x019E
    1f20:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
	 * state = DOOR_CLOSING
	 * so in the while(1) loop the program will keep entering this state
	 * until it changes, so this while loop prevents program
	 * from entering the state more than once
	 */
	while(g_secondes_counter <=33);
    1f24:	80 91 87 01 	lds	r24, 0x0187
    1f28:	82 32       	cpi	r24, 0x22	; 34
    1f2a:	e0 f3       	brcs	.-8      	; 0x1f24 <DoorMechanism+0x5a>
	DcMotor_Rotate(STOP); //stop motor
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	0e 94 26 10 	call	0x204c	; 0x204c <DcMotor_Rotate>
	g_state = MAIN_OPTIONS;
    1f32:	83 ef       	ldi	r24, 0xF3	; 243
    1f34:	80 93 9e 01 	sts	0x019E, r24
	UART_sendByte(g_state);/*send the MAIN_OPTIONS flag to mainOptions*/
    1f38:	80 91 9e 01 	lds	r24, 0x019E
    1f3c:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>

	/*deinit the timer and put the seconds counter equal zero and set the flag*/
	TIMER_deinit(&g_timer);
    1f40:	88 e7       	ldi	r24, 0x78	; 120
    1f42:	91 e0       	ldi	r25, 0x01	; 1
    1f44:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <TIMER_deinit>
	g_secondes_counter=0;
    1f48:	10 92 87 01 	sts	0x0187, r1
	g_init_timer_motor=1;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	80 93 68 01 	sts	0x0168, r24
}
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <buzzerAlarm>:
 * first check of the timer init flag
 * enable buzzer for one minute if the seconds counter is less than 60
 * else disable buzzer deinit timer send the g_state by uart
 */
void buzzerAlarm()
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
	/*check on the timer flag */
	if(g_init_timer_buzzer== 1 )
    1f60:	80 91 69 01 	lds	r24, 0x0169
    1f64:	81 30       	cpi	r24, 0x01	; 1
    1f66:	31 f4       	brne	.+12     	; 0x1f74 <buzzerAlarm+0x1c>
	{
		TIMER_init(&g_timer); //Timer starts
    1f68:	88 e7       	ldi	r24, 0x78	; 120
    1f6a:	91 e0       	ldi	r25, 0x01	; 1
    1f6c:	0e 94 82 15 	call	0x2b04	; 0x2b04 <TIMER_init>
		g_init_timer_buzzer=0;
    1f70:	10 92 69 01 	sts	0x0169, r1
	}
	/*enable buzzer for one minute */
	if(g_secondes_counter <=60)
    1f74:	80 91 87 01 	lds	r24, 0x0187
    1f78:	8d 33       	cpi	r24, 0x3D	; 61
    1f7a:	18 f4       	brcc	.+6      	; 0x1f82 <buzzerAlarm+0x2a>
	{
		BUZZER_on();
    1f7c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <BUZZER_on>
    1f80:	12 c0       	rjmp	.+36     	; 0x1fa6 <buzzerAlarm+0x4e>
	}
	else
	{
		/*set the flag, deinit the timer ,clear counter , send the current state and clear the mismatch counter*/
		g_init_timer_buzzer=1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	80 93 69 01 	sts	0x0169, r24
		TIMER_deinit(&g_timer);
    1f88:	88 e7       	ldi	r24, 0x78	; 120
    1f8a:	91 e0       	ldi	r25, 0x01	; 1
    1f8c:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <TIMER_deinit>
		g_secondes_counter=0;
    1f90:	10 92 87 01 	sts	0x0187, r1
		g_state = MAIN_OPTIONS;
    1f94:	83 ef       	ldi	r24, 0xF3	; 243
    1f96:	80 93 9e 01 	sts	0x019E, r24
		UART_sendByte(g_state);
    1f9a:	80 91 9e 01 	lds	r24, 0x019E
    1f9e:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
		mismatchCounter=0;
    1fa2:	10 92 86 01 	sts	0x0186, r1
	}
}
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <timerCounter>:
/*
 * Description:
 * the set call back function for the timer increment the counter every second
 */
void timerCounter()
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
	g_secondes_counter++;
    1fb4:	80 91 87 01 	lds	r24, 0x0187
    1fb8:	8f 5f       	subi	r24, 0xFF	; 255
    1fba:	80 93 87 01 	sts	0x0187, r24
}
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <BUZZER_init>:

/* Description :
 * initiating the buzzer driver according to the connection port and pin
 */
void BUZZER_init()
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	67 e0       	ldi	r22, 0x07	; 7
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 12 11 	call	0x2224	; 0x2224 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID,LOGIC_LOW);
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	67 e0       	ldi	r22, 0x07	; 7
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>
}
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <BUZZER_on>:

/* Description :
 * enabling the buzzer
 */
void BUZZER_on()
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID,LOGIC_HIGH);
    1fee:	82 e0       	ldi	r24, 0x02	; 2
    1ff0:	67 e0       	ldi	r22, 0x07	; 7
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>
}
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <BUZZER_off>:

/* Description :
 * disabling the buzzer
 */
void BUZZER_off()
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID,LOGIC_LOW);
    2006:	82 e0       	ldi	r24, 0x02	; 2
    2008:	67 e0       	ldi	r22, 0x07	; 7
    200a:	40 e0       	ldi	r20, 0x00	; 0
    200c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>
}
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <DcMotor_Init>:
/* Function Name:DcMotor_Init
 * Description: initialize the DC motor driver selected pins in the AVR
 * 				to output pins and keep the motor off at start
 */
void DcMotor_Init(void)
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR1_IN_PORT_ID, MOTOR1_IN1_PIN_ID, PIN_OUTPUT);/*SET THE MOTOR PINS AS OUTPUT*/
    201e:	83 e0       	ldi	r24, 0x03	; 3
    2020:	66 e0       	ldi	r22, 0x06	; 6
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	0e 94 12 11 	call	0x2224	; 0x2224 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR1_IN_PORT_ID, MOTOR1_IN2_PIN_ID, PIN_OUTPUT);
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	67 e0       	ldi	r22, 0x07	; 7
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 12 11 	call	0x2224	; 0x2224 <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN1_PIN_ID, LOGIC_LOW);/*MOTOR  OFF AT THE BEGINNG*/
    2032:	83 e0       	ldi	r24, 0x03	; 3
    2034:	66 e0       	ldi	r22, 0x06	; 6
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>
	GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN2_PIN_ID, LOGIC_LOW);
    203c:	83 e0       	ldi	r24, 0x03	; 3
    203e:	67 e0       	ldi	r22, 0x07	; 7
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>

}
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <DcMotor_Rotate>:
 * description: update the motor state and speed according to its selected configuration structure
 * Arguments:the member of the config_type structure state
 *
 */
void DcMotor_Rotate(DcMotor_State a_state)
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	00 d0       	rcall	.+0      	; 0x2052 <DcMotor_Rotate+0x6>
    2052:	0f 92       	push	r0
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	89 83       	std	Y+1, r24	; 0x01
	switch (a_state)
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	3b 83       	std	Y+3, r19	; 0x03
    2062:	2a 83       	std	Y+2, r18	; 0x02
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	9b 81       	ldd	r25, Y+3	; 0x03
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	91 05       	cpc	r25, r1
    206c:	a1 f0       	breq	.+40     	; 0x2096 <DcMotor_Rotate+0x4a>
    206e:	2a 81       	ldd	r18, Y+2	; 0x02
    2070:	3b 81       	ldd	r19, Y+3	; 0x03
    2072:	22 30       	cpi	r18, 0x02	; 2
    2074:	31 05       	cpc	r19, r1
    2076:	d1 f0       	breq	.+52     	; 0x20ac <DcMotor_Rotate+0x60>
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	9b 81       	ldd	r25, Y+3	; 0x03
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	09 f5       	brne	.+66     	; 0x20c2 <DcMotor_Rotate+0x76>
	{
	/* switch case on the new state value to change the motor state*/
	case STOP:
		/*both pins are zeros motor stop*/
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN1_PIN_ID, LOGIC_LOW);
    2080:	83 e0       	ldi	r24, 0x03	; 3
    2082:	66 e0       	ldi	r22, 0x06	; 6
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN2_PIN_ID, LOGIC_LOW);
    208a:	83 e0       	ldi	r24, 0x03	; 3
    208c:	67 e0       	ldi	r22, 0x07	; 7
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>
    2094:	20 c0       	rjmp	.+64     	; 0x20d6 <DcMotor_Rotate+0x8a>
		break;
	case CLOCKWISE:
		/*set motor pins in CW direction*/
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN1_PIN_ID, LOGIC_LOW);
    2096:	83 e0       	ldi	r24, 0x03	; 3
    2098:	66 e0       	ldi	r22, 0x06	; 6
    209a:	40 e0       	ldi	r20, 0x00	; 0
    209c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN2_PIN_ID, LOGIC_HIGH);
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	67 e0       	ldi	r22, 0x07	; 7
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>
    20aa:	15 c0       	rjmp	.+42     	; 0x20d6 <DcMotor_Rotate+0x8a>
		break;
	case ANTI_CLOCKWISE:
		/*set motor pins in ACW direction*/
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN1_PIN_ID, LOGIC_HIGH);
    20ac:	83 e0       	ldi	r24, 0x03	; 3
    20ae:	66 e0       	ldi	r22, 0x06	; 6
    20b0:	41 e0       	ldi	r20, 0x01	; 1
    20b2:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN2_PIN_ID, LOGIC_LOW);
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	67 e0       	ldi	r22, 0x07	; 7
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>
    20c0:	0a c0       	rjmp	.+20     	; 0x20d6 <DcMotor_Rotate+0x8a>
		break;
	default:
		/*both pins are zeros motor stop*/
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN1_PIN_ID, LOGIC_LOW);
    20c2:	83 e0       	ldi	r24, 0x03	; 3
    20c4:	66 e0       	ldi	r22, 0x06	; 6
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN2_PIN_ID, LOGIC_LOW);
    20cc:	83 e0       	ldi	r24, 0x03	; 3
    20ce:	67 e0       	ldi	r22, 0x07	; 7
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GPIO_writePin>

	}
}
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <EEPROM_writeByte+0x6>
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <EEPROM_writeByte+0x8>
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	9a 83       	std	Y+2, r25	; 0x02
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    20f4:	0e 94 dd 17 	call	0x2fba	; 0x2fba <TWI_start>
    if (TWI_getStatus() != TWI_START)
    20f8:	0e 94 35 18 	call	0x306a	; 0x306a <TWI_getStatus>
    20fc:	88 30       	cpi	r24, 0x08	; 8
    20fe:	11 f0       	breq	.+4      	; 0x2104 <EEPROM_writeByte+0x22>
        return ERROR;
    2100:	1c 82       	std	Y+4, r1	; 0x04
    2102:	28 c0       	rjmp	.+80     	; 0x2154 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	80 70       	andi	r24, 0x00	; 0
    210a:	97 70       	andi	r25, 0x07	; 7
    210c:	88 0f       	add	r24, r24
    210e:	89 2f       	mov	r24, r25
    2110:	88 1f       	adc	r24, r24
    2112:	99 0b       	sbc	r25, r25
    2114:	91 95       	neg	r25
    2116:	80 6a       	ori	r24, 0xA0	; 160
    2118:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    211c:	0e 94 35 18 	call	0x306a	; 0x306a <TWI_getStatus>
    2120:	88 31       	cpi	r24, 0x18	; 24
    2122:	11 f0       	breq	.+4      	; 0x2128 <EEPROM_writeByte+0x46>
        return ERROR; 
    2124:	1c 82       	std	Y+4, r1	; 0x04
    2126:	16 c0       	rjmp	.+44     	; 0x2154 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    212e:	0e 94 35 18 	call	0x306a	; 0x306a <TWI_getStatus>
    2132:	88 32       	cpi	r24, 0x28	; 40
    2134:	11 f0       	breq	.+4      	; 0x213a <EEPROM_writeByte+0x58>
        return ERROR;
    2136:	1c 82       	std	Y+4, r1	; 0x04
    2138:	0d c0       	rjmp	.+26     	; 0x2154 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2140:	0e 94 35 18 	call	0x306a	; 0x306a <TWI_getStatus>
    2144:	88 32       	cpi	r24, 0x28	; 40
    2146:	11 f0       	breq	.+4      	; 0x214c <EEPROM_writeByte+0x6a>
        return ERROR;
    2148:	1c 82       	std	Y+4, r1	; 0x04
    214a:	04 c0       	rjmp	.+8      	; 0x2154 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    214c:	0e 94 ed 17 	call	0x2fda	; 0x2fda <TWI_stop>
	
    return SUCCESS;
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	8c 83       	std	Y+4, r24	; 0x04
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	00 d0       	rcall	.+0      	; 0x216a <EEPROM_readByte+0x6>
    216a:	00 d0       	rcall	.+0      	; 0x216c <EEPROM_readByte+0x8>
    216c:	0f 92       	push	r0
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	7c 83       	std	Y+4, r23	; 0x04
    2178:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    217a:	0e 94 dd 17 	call	0x2fba	; 0x2fba <TWI_start>
    if (TWI_getStatus() != TWI_START)
    217e:	0e 94 35 18 	call	0x306a	; 0x306a <TWI_getStatus>
    2182:	88 30       	cpi	r24, 0x08	; 8
    2184:	11 f0       	breq	.+4      	; 0x218a <EEPROM_readByte+0x26>
        return ERROR;
    2186:	1d 82       	std	Y+5, r1	; 0x05
    2188:	44 c0       	rjmp	.+136    	; 0x2212 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	80 70       	andi	r24, 0x00	; 0
    2190:	97 70       	andi	r25, 0x07	; 7
    2192:	88 0f       	add	r24, r24
    2194:	89 2f       	mov	r24, r25
    2196:	88 1f       	adc	r24, r24
    2198:	99 0b       	sbc	r25, r25
    219a:	91 95       	neg	r25
    219c:	80 6a       	ori	r24, 0xA0	; 160
    219e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    21a2:	0e 94 35 18 	call	0x306a	; 0x306a <TWI_getStatus>
    21a6:	88 31       	cpi	r24, 0x18	; 24
    21a8:	11 f0       	breq	.+4      	; 0x21ae <EEPROM_readByte+0x4a>
        return ERROR;
    21aa:	1d 82       	std	Y+5, r1	; 0x05
    21ac:	32 c0       	rjmp	.+100    	; 0x2212 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    21b4:	0e 94 35 18 	call	0x306a	; 0x306a <TWI_getStatus>
    21b8:	88 32       	cpi	r24, 0x28	; 40
    21ba:	11 f0       	breq	.+4      	; 0x21c0 <EEPROM_readByte+0x5c>
        return ERROR;
    21bc:	1d 82       	std	Y+5, r1	; 0x05
    21be:	29 c0       	rjmp	.+82     	; 0x2212 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    21c0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    21c4:	0e 94 35 18 	call	0x306a	; 0x306a <TWI_getStatus>
    21c8:	80 31       	cpi	r24, 0x10	; 16
    21ca:	11 f0       	breq	.+4      	; 0x21d0 <EEPROM_readByte+0x6c>
        return ERROR;
    21cc:	1d 82       	std	Y+5, r1	; 0x05
    21ce:	21 c0       	rjmp	.+66     	; 0x2212 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	80 70       	andi	r24, 0x00	; 0
    21d6:	97 70       	andi	r25, 0x07	; 7
    21d8:	88 0f       	add	r24, r24
    21da:	89 2f       	mov	r24, r25
    21dc:	88 1f       	adc	r24, r24
    21de:	99 0b       	sbc	r25, r25
    21e0:	91 95       	neg	r25
    21e2:	81 6a       	ori	r24, 0xA1	; 161
    21e4:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    21e8:	0e 94 35 18 	call	0x306a	; 0x306a <TWI_getStatus>
    21ec:	80 34       	cpi	r24, 0x40	; 64
    21ee:	11 f0       	breq	.+4      	; 0x21f4 <EEPROM_readByte+0x90>
        return ERROR;
    21f0:	1d 82       	std	Y+5, r1	; 0x05
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    21f4:	0e 94 22 18 	call	0x3044	; 0x3044 <TWI_readByteWithNACK>
    21f8:	eb 81       	ldd	r30, Y+3	; 0x03
    21fa:	fc 81       	ldd	r31, Y+4	; 0x04
    21fc:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    21fe:	0e 94 35 18 	call	0x306a	; 0x306a <TWI_getStatus>
    2202:	88 35       	cpi	r24, 0x58	; 88
    2204:	11 f0       	breq	.+4      	; 0x220a <EEPROM_readByte+0xa6>
        return ERROR;
    2206:	1d 82       	std	Y+5, r1	; 0x05
    2208:	04 c0       	rjmp	.+8      	; 0x2212 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    220a:	0e 94 ed 17 	call	0x2fda	; 0x2fda <TWI_stop>

    return SUCCESS;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	00 d0       	rcall	.+0      	; 0x222a <GPIO_setupPinDirection+0x6>
    222a:	00 d0       	rcall	.+0      	; 0x222c <GPIO_setupPinDirection+0x8>
    222c:	0f 92       	push	r0
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	6a 83       	std	Y+2, r22	; 0x02
    2236:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	88 30       	cpi	r24, 0x08	; 8
    223c:	08 f0       	brcs	.+2      	; 0x2240 <GPIO_setupPinDirection+0x1c>
    223e:	d5 c0       	rjmp	.+426    	; 0x23ea <GPIO_setupPinDirection+0x1c6>
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	84 30       	cpi	r24, 0x04	; 4
    2244:	08 f0       	brcs	.+2      	; 0x2248 <GPIO_setupPinDirection+0x24>
    2246:	d1 c0       	rjmp	.+418    	; 0x23ea <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	3d 83       	std	Y+5, r19	; 0x05
    2250:	2c 83       	std	Y+4, r18	; 0x04
    2252:	8c 81       	ldd	r24, Y+4	; 0x04
    2254:	9d 81       	ldd	r25, Y+5	; 0x05
    2256:	81 30       	cpi	r24, 0x01	; 1
    2258:	91 05       	cpc	r25, r1
    225a:	09 f4       	brne	.+2      	; 0x225e <GPIO_setupPinDirection+0x3a>
    225c:	43 c0       	rjmp	.+134    	; 0x22e4 <GPIO_setupPinDirection+0xc0>
    225e:	2c 81       	ldd	r18, Y+4	; 0x04
    2260:	3d 81       	ldd	r19, Y+5	; 0x05
    2262:	22 30       	cpi	r18, 0x02	; 2
    2264:	31 05       	cpc	r19, r1
    2266:	2c f4       	brge	.+10     	; 0x2272 <GPIO_setupPinDirection+0x4e>
    2268:	8c 81       	ldd	r24, Y+4	; 0x04
    226a:	9d 81       	ldd	r25, Y+5	; 0x05
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	71 f0       	breq	.+28     	; 0x228c <GPIO_setupPinDirection+0x68>
    2270:	bc c0       	rjmp	.+376    	; 0x23ea <GPIO_setupPinDirection+0x1c6>
    2272:	2c 81       	ldd	r18, Y+4	; 0x04
    2274:	3d 81       	ldd	r19, Y+5	; 0x05
    2276:	22 30       	cpi	r18, 0x02	; 2
    2278:	31 05       	cpc	r19, r1
    227a:	09 f4       	brne	.+2      	; 0x227e <GPIO_setupPinDirection+0x5a>
    227c:	5f c0       	rjmp	.+190    	; 0x233c <GPIO_setupPinDirection+0x118>
    227e:	8c 81       	ldd	r24, Y+4	; 0x04
    2280:	9d 81       	ldd	r25, Y+5	; 0x05
    2282:	83 30       	cpi	r24, 0x03	; 3
    2284:	91 05       	cpc	r25, r1
    2286:	09 f4       	brne	.+2      	; 0x228a <GPIO_setupPinDirection+0x66>
    2288:	85 c0       	rjmp	.+266    	; 0x2394 <GPIO_setupPinDirection+0x170>
    228a:	af c0       	rjmp	.+350    	; 0x23ea <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	a1 f4       	brne	.+40     	; 0x22ba <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2292:	aa e3       	ldi	r26, 0x3A	; 58
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	ea e3       	ldi	r30, 0x3A	; 58
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	48 2f       	mov	r20, r24
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	02 2e       	mov	r0, r18
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <GPIO_setupPinDirection+0x8c>
    22ac:	88 0f       	add	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	0a 94       	dec	r0
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <GPIO_setupPinDirection+0x88>
    22b4:	84 2b       	or	r24, r20
    22b6:	8c 93       	st	X, r24
    22b8:	98 c0       	rjmp	.+304    	; 0x23ea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    22ba:	aa e3       	ldi	r26, 0x3A	; 58
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	ea e3       	ldi	r30, 0x3A	; 58
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	48 2f       	mov	r20, r24
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	02 2e       	mov	r0, r18
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <GPIO_setupPinDirection+0xb4>
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	0a 94       	dec	r0
    22da:	e2 f7       	brpl	.-8      	; 0x22d4 <GPIO_setupPinDirection+0xb0>
    22dc:	80 95       	com	r24
    22de:	84 23       	and	r24, r20
    22e0:	8c 93       	st	X, r24
    22e2:	83 c0       	rjmp	.+262    	; 0x23ea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	81 30       	cpi	r24, 0x01	; 1
    22e8:	a1 f4       	brne	.+40     	; 0x2312 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    22ea:	a7 e3       	ldi	r26, 0x37	; 55
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e7 e3       	ldi	r30, 0x37	; 55
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	48 2f       	mov	r20, r24
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	02 2e       	mov	r0, r18
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <GPIO_setupPinDirection+0xe4>
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	0a 94       	dec	r0
    230a:	e2 f7       	brpl	.-8      	; 0x2304 <GPIO_setupPinDirection+0xe0>
    230c:	84 2b       	or	r24, r20
    230e:	8c 93       	st	X, r24
    2310:	6c c0       	rjmp	.+216    	; 0x23ea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2312:	a7 e3       	ldi	r26, 0x37	; 55
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e7 e3       	ldi	r30, 0x37	; 55
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	48 2f       	mov	r20, r24
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	02 2e       	mov	r0, r18
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <GPIO_setupPinDirection+0x10c>
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	0a 94       	dec	r0
    2332:	e2 f7       	brpl	.-8      	; 0x232c <GPIO_setupPinDirection+0x108>
    2334:	80 95       	com	r24
    2336:	84 23       	and	r24, r20
    2338:	8c 93       	st	X, r24
    233a:	57 c0       	rjmp	.+174    	; 0x23ea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	81 30       	cpi	r24, 0x01	; 1
    2340:	a1 f4       	brne	.+40     	; 0x236a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2342:	a4 e3       	ldi	r26, 0x34	; 52
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e4 e3       	ldi	r30, 0x34	; 52
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	48 2f       	mov	r20, r24
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	02 2e       	mov	r0, r18
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <GPIO_setupPinDirection+0x13c>
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	0a 94       	dec	r0
    2362:	e2 f7       	brpl	.-8      	; 0x235c <GPIO_setupPinDirection+0x138>
    2364:	84 2b       	or	r24, r20
    2366:	8c 93       	st	X, r24
    2368:	40 c0       	rjmp	.+128    	; 0x23ea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    236a:	a4 e3       	ldi	r26, 0x34	; 52
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e4 e3       	ldi	r30, 0x34	; 52
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	48 2f       	mov	r20, r24
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	02 2e       	mov	r0, r18
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <GPIO_setupPinDirection+0x164>
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	0a 94       	dec	r0
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <GPIO_setupPinDirection+0x160>
    238c:	80 95       	com	r24
    238e:	84 23       	and	r24, r20
    2390:	8c 93       	st	X, r24
    2392:	2b c0       	rjmp	.+86     	; 0x23ea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	81 30       	cpi	r24, 0x01	; 1
    2398:	a1 f4       	brne	.+40     	; 0x23c2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    239a:	a1 e3       	ldi	r26, 0x31	; 49
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e1 e3       	ldi	r30, 0x31	; 49
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	48 2f       	mov	r20, r24
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 2e       	mov	r0, r18
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <GPIO_setupPinDirection+0x194>
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	0a 94       	dec	r0
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <GPIO_setupPinDirection+0x190>
    23bc:	84 2b       	or	r24, r20
    23be:	8c 93       	st	X, r24
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    23c2:	a1 e3       	ldi	r26, 0x31	; 49
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e1 e3       	ldi	r30, 0x31	; 49
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	48 2f       	mov	r20, r24
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 2e       	mov	r0, r18
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <GPIO_setupPinDirection+0x1bc>
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	0a 94       	dec	r0
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <GPIO_setupPinDirection+0x1b8>
    23e4:	80 95       	com	r24
    23e6:	84 23       	and	r24, r20
    23e8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <GPIO_writePin+0x6>
    2400:	00 d0       	rcall	.+0      	; 0x2402 <GPIO_writePin+0x8>
    2402:	0f 92       	push	r0
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	6a 83       	std	Y+2, r22	; 0x02
    240c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	88 30       	cpi	r24, 0x08	; 8
    2412:	08 f0       	brcs	.+2      	; 0x2416 <GPIO_writePin+0x1c>
    2414:	d5 c0       	rjmp	.+426    	; 0x25c0 <GPIO_writePin+0x1c6>
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	84 30       	cpi	r24, 0x04	; 4
    241a:	08 f0       	brcs	.+2      	; 0x241e <GPIO_writePin+0x24>
    241c:	d1 c0       	rjmp	.+418    	; 0x25c0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	3d 83       	std	Y+5, r19	; 0x05
    2426:	2c 83       	std	Y+4, r18	; 0x04
    2428:	8c 81       	ldd	r24, Y+4	; 0x04
    242a:	9d 81       	ldd	r25, Y+5	; 0x05
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	91 05       	cpc	r25, r1
    2430:	09 f4       	brne	.+2      	; 0x2434 <GPIO_writePin+0x3a>
    2432:	43 c0       	rjmp	.+134    	; 0x24ba <GPIO_writePin+0xc0>
    2434:	2c 81       	ldd	r18, Y+4	; 0x04
    2436:	3d 81       	ldd	r19, Y+5	; 0x05
    2438:	22 30       	cpi	r18, 0x02	; 2
    243a:	31 05       	cpc	r19, r1
    243c:	2c f4       	brge	.+10     	; 0x2448 <GPIO_writePin+0x4e>
    243e:	8c 81       	ldd	r24, Y+4	; 0x04
    2440:	9d 81       	ldd	r25, Y+5	; 0x05
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	71 f0       	breq	.+28     	; 0x2462 <GPIO_writePin+0x68>
    2446:	bc c0       	rjmp	.+376    	; 0x25c0 <GPIO_writePin+0x1c6>
    2448:	2c 81       	ldd	r18, Y+4	; 0x04
    244a:	3d 81       	ldd	r19, Y+5	; 0x05
    244c:	22 30       	cpi	r18, 0x02	; 2
    244e:	31 05       	cpc	r19, r1
    2450:	09 f4       	brne	.+2      	; 0x2454 <GPIO_writePin+0x5a>
    2452:	5f c0       	rjmp	.+190    	; 0x2512 <GPIO_writePin+0x118>
    2454:	8c 81       	ldd	r24, Y+4	; 0x04
    2456:	9d 81       	ldd	r25, Y+5	; 0x05
    2458:	83 30       	cpi	r24, 0x03	; 3
    245a:	91 05       	cpc	r25, r1
    245c:	09 f4       	brne	.+2      	; 0x2460 <GPIO_writePin+0x66>
    245e:	85 c0       	rjmp	.+266    	; 0x256a <GPIO_writePin+0x170>
    2460:	af c0       	rjmp	.+350    	; 0x25c0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	81 30       	cpi	r24, 0x01	; 1
    2466:	a1 f4       	brne	.+40     	; 0x2490 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2468:	ab e3       	ldi	r26, 0x3B	; 59
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	eb e3       	ldi	r30, 0x3B	; 59
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	48 2f       	mov	r20, r24
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	02 2e       	mov	r0, r18
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <GPIO_writePin+0x8c>
    2482:	88 0f       	add	r24, r24
    2484:	99 1f       	adc	r25, r25
    2486:	0a 94       	dec	r0
    2488:	e2 f7       	brpl	.-8      	; 0x2482 <GPIO_writePin+0x88>
    248a:	84 2b       	or	r24, r20
    248c:	8c 93       	st	X, r24
    248e:	98 c0       	rjmp	.+304    	; 0x25c0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2490:	ab e3       	ldi	r26, 0x3B	; 59
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	eb e3       	ldi	r30, 0x3B	; 59
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	48 2f       	mov	r20, r24
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	02 2e       	mov	r0, r18
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <GPIO_writePin+0xb4>
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	0a 94       	dec	r0
    24b0:	e2 f7       	brpl	.-8      	; 0x24aa <GPIO_writePin+0xb0>
    24b2:	80 95       	com	r24
    24b4:	84 23       	and	r24, r20
    24b6:	8c 93       	st	X, r24
    24b8:	83 c0       	rjmp	.+262    	; 0x25c0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	81 30       	cpi	r24, 0x01	; 1
    24be:	a1 f4       	brne	.+40     	; 0x24e8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    24c0:	a8 e3       	ldi	r26, 0x38	; 56
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e8 e3       	ldi	r30, 0x38	; 56
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	48 2f       	mov	r20, r24
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 2e       	mov	r0, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <GPIO_writePin+0xe4>
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	0a 94       	dec	r0
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <GPIO_writePin+0xe0>
    24e2:	84 2b       	or	r24, r20
    24e4:	8c 93       	st	X, r24
    24e6:	6c c0       	rjmp	.+216    	; 0x25c0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    24e8:	a8 e3       	ldi	r26, 0x38	; 56
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e8 e3       	ldi	r30, 0x38	; 56
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	48 2f       	mov	r20, r24
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	02 2e       	mov	r0, r18
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <GPIO_writePin+0x10c>
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	0a 94       	dec	r0
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <GPIO_writePin+0x108>
    250a:	80 95       	com	r24
    250c:	84 23       	and	r24, r20
    250e:	8c 93       	st	X, r24
    2510:	57 c0       	rjmp	.+174    	; 0x25c0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	81 30       	cpi	r24, 0x01	; 1
    2516:	a1 f4       	brne	.+40     	; 0x2540 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2518:	a5 e3       	ldi	r26, 0x35	; 53
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e5 e3       	ldi	r30, 0x35	; 53
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	48 2f       	mov	r20, r24
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	02 2e       	mov	r0, r18
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <GPIO_writePin+0x13c>
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	0a 94       	dec	r0
    2538:	e2 f7       	brpl	.-8      	; 0x2532 <GPIO_writePin+0x138>
    253a:	84 2b       	or	r24, r20
    253c:	8c 93       	st	X, r24
    253e:	40 c0       	rjmp	.+128    	; 0x25c0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2540:	a5 e3       	ldi	r26, 0x35	; 53
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e5 e3       	ldi	r30, 0x35	; 53
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	48 2f       	mov	r20, r24
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	02 2e       	mov	r0, r18
    2558:	02 c0       	rjmp	.+4      	; 0x255e <GPIO_writePin+0x164>
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	0a 94       	dec	r0
    2560:	e2 f7       	brpl	.-8      	; 0x255a <GPIO_writePin+0x160>
    2562:	80 95       	com	r24
    2564:	84 23       	and	r24, r20
    2566:	8c 93       	st	X, r24
    2568:	2b c0       	rjmp	.+86     	; 0x25c0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	81 30       	cpi	r24, 0x01	; 1
    256e:	a1 f4       	brne	.+40     	; 0x2598 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2570:	a2 e3       	ldi	r26, 0x32	; 50
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	e2 e3       	ldi	r30, 0x32	; 50
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	48 2f       	mov	r20, r24
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	02 2e       	mov	r0, r18
    2588:	02 c0       	rjmp	.+4      	; 0x258e <GPIO_writePin+0x194>
    258a:	88 0f       	add	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	0a 94       	dec	r0
    2590:	e2 f7       	brpl	.-8      	; 0x258a <GPIO_writePin+0x190>
    2592:	84 2b       	or	r24, r20
    2594:	8c 93       	st	X, r24
    2596:	14 c0       	rjmp	.+40     	; 0x25c0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2598:	a2 e3       	ldi	r26, 0x32	; 50
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e2 e3       	ldi	r30, 0x32	; 50
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	48 2f       	mov	r20, r24
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	02 2e       	mov	r0, r18
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <GPIO_writePin+0x1bc>
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	0a 94       	dec	r0
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <GPIO_writePin+0x1b8>
    25ba:	80 95       	com	r24
    25bc:	84 23       	and	r24, r20
    25be:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <GPIO_readPin+0x6>
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <GPIO_readPin+0x8>
    25d8:	0f 92       	push	r0
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	8a 83       	std	Y+2, r24	; 0x02
    25e0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    25e2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	88 30       	cpi	r24, 0x08	; 8
    25e8:	08 f0       	brcs	.+2      	; 0x25ec <GPIO_readPin+0x1c>
    25ea:	84 c0       	rjmp	.+264    	; 0x26f4 <GPIO_readPin+0x124>
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	84 30       	cpi	r24, 0x04	; 4
    25f0:	08 f0       	brcs	.+2      	; 0x25f4 <GPIO_readPin+0x24>
    25f2:	80 c0       	rjmp	.+256    	; 0x26f4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	3d 83       	std	Y+5, r19	; 0x05
    25fc:	2c 83       	std	Y+4, r18	; 0x04
    25fe:	4c 81       	ldd	r20, Y+4	; 0x04
    2600:	5d 81       	ldd	r21, Y+5	; 0x05
    2602:	41 30       	cpi	r20, 0x01	; 1
    2604:	51 05       	cpc	r21, r1
    2606:	79 f1       	breq	.+94     	; 0x2666 <GPIO_readPin+0x96>
    2608:	8c 81       	ldd	r24, Y+4	; 0x04
    260a:	9d 81       	ldd	r25, Y+5	; 0x05
    260c:	82 30       	cpi	r24, 0x02	; 2
    260e:	91 05       	cpc	r25, r1
    2610:	34 f4       	brge	.+12     	; 0x261e <GPIO_readPin+0x4e>
    2612:	2c 81       	ldd	r18, Y+4	; 0x04
    2614:	3d 81       	ldd	r19, Y+5	; 0x05
    2616:	21 15       	cp	r18, r1
    2618:	31 05       	cpc	r19, r1
    261a:	69 f0       	breq	.+26     	; 0x2636 <GPIO_readPin+0x66>
    261c:	6b c0       	rjmp	.+214    	; 0x26f4 <GPIO_readPin+0x124>
    261e:	4c 81       	ldd	r20, Y+4	; 0x04
    2620:	5d 81       	ldd	r21, Y+5	; 0x05
    2622:	42 30       	cpi	r20, 0x02	; 2
    2624:	51 05       	cpc	r21, r1
    2626:	b9 f1       	breq	.+110    	; 0x2696 <GPIO_readPin+0xc6>
    2628:	8c 81       	ldd	r24, Y+4	; 0x04
    262a:	9d 81       	ldd	r25, Y+5	; 0x05
    262c:	83 30       	cpi	r24, 0x03	; 3
    262e:	91 05       	cpc	r25, r1
    2630:	09 f4       	brne	.+2      	; 0x2634 <GPIO_readPin+0x64>
    2632:	49 c0       	rjmp	.+146    	; 0x26c6 <GPIO_readPin+0xf6>
    2634:	5f c0       	rjmp	.+190    	; 0x26f4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2636:	e9 e3       	ldi	r30, 0x39	; 57
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	88 2f       	mov	r24, r24
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	a9 01       	movw	r20, r18
    2648:	02 c0       	rjmp	.+4      	; 0x264e <GPIO_readPin+0x7e>
    264a:	55 95       	asr	r21
    264c:	47 95       	ror	r20
    264e:	8a 95       	dec	r24
    2650:	e2 f7       	brpl	.-8      	; 0x264a <GPIO_readPin+0x7a>
    2652:	ca 01       	movw	r24, r20
    2654:	81 70       	andi	r24, 0x01	; 1
    2656:	90 70       	andi	r25, 0x00	; 0
    2658:	88 23       	and	r24, r24
    265a:	19 f0       	breq	.+6      	; 0x2662 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	49 c0       	rjmp	.+146    	; 0x26f4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2662:	19 82       	std	Y+1, r1	; 0x01
    2664:	47 c0       	rjmp	.+142    	; 0x26f4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2666:	e6 e3       	ldi	r30, 0x36	; 54
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	88 2f       	mov	r24, r24
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	a9 01       	movw	r20, r18
    2678:	02 c0       	rjmp	.+4      	; 0x267e <GPIO_readPin+0xae>
    267a:	55 95       	asr	r21
    267c:	47 95       	ror	r20
    267e:	8a 95       	dec	r24
    2680:	e2 f7       	brpl	.-8      	; 0x267a <GPIO_readPin+0xaa>
    2682:	ca 01       	movw	r24, r20
    2684:	81 70       	andi	r24, 0x01	; 1
    2686:	90 70       	andi	r25, 0x00	; 0
    2688:	88 23       	and	r24, r24
    268a:	19 f0       	breq	.+6      	; 0x2692 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	31 c0       	rjmp	.+98     	; 0x26f4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2692:	19 82       	std	Y+1, r1	; 0x01
    2694:	2f c0       	rjmp	.+94     	; 0x26f4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2696:	e3 e3       	ldi	r30, 0x33	; 51
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	88 2f       	mov	r24, r24
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	a9 01       	movw	r20, r18
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <GPIO_readPin+0xde>
    26aa:	55 95       	asr	r21
    26ac:	47 95       	ror	r20
    26ae:	8a 95       	dec	r24
    26b0:	e2 f7       	brpl	.-8      	; 0x26aa <GPIO_readPin+0xda>
    26b2:	ca 01       	movw	r24, r20
    26b4:	81 70       	andi	r24, 0x01	; 1
    26b6:	90 70       	andi	r25, 0x00	; 0
    26b8:	88 23       	and	r24, r24
    26ba:	19 f0       	breq	.+6      	; 0x26c2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	19 c0       	rjmp	.+50     	; 0x26f4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    26c2:	19 82       	std	Y+1, r1	; 0x01
    26c4:	17 c0       	rjmp	.+46     	; 0x26f4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    26c6:	e0 e3       	ldi	r30, 0x30	; 48
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	28 2f       	mov	r18, r24
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	88 2f       	mov	r24, r24
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	a9 01       	movw	r20, r18
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <GPIO_readPin+0x10e>
    26da:	55 95       	asr	r21
    26dc:	47 95       	ror	r20
    26de:	8a 95       	dec	r24
    26e0:	e2 f7       	brpl	.-8      	; 0x26da <GPIO_readPin+0x10a>
    26e2:	ca 01       	movw	r24, r20
    26e4:	81 70       	andi	r24, 0x01	; 1
    26e6:	90 70       	andi	r25, 0x00	; 0
    26e8:	88 23       	and	r24, r24
    26ea:	19 f0       	breq	.+6      	; 0x26f2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	01 c0       	rjmp	.+2      	; 0x26f4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    26f2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	00 d0       	rcall	.+0      	; 0x270c <GPIO_setupPortDirection+0x6>
    270c:	00 d0       	rcall	.+0      	; 0x270e <GPIO_setupPortDirection+0x8>
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	84 30       	cpi	r24, 0x04	; 4
    271a:	90 f5       	brcc	.+100    	; 0x2780 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	28 2f       	mov	r18, r24
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	3c 83       	std	Y+4, r19	; 0x04
    2724:	2b 83       	std	Y+3, r18	; 0x03
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	9c 81       	ldd	r25, Y+4	; 0x04
    272a:	81 30       	cpi	r24, 0x01	; 1
    272c:	91 05       	cpc	r25, r1
    272e:	d1 f0       	breq	.+52     	; 0x2764 <GPIO_setupPortDirection+0x5e>
    2730:	2b 81       	ldd	r18, Y+3	; 0x03
    2732:	3c 81       	ldd	r19, Y+4	; 0x04
    2734:	22 30       	cpi	r18, 0x02	; 2
    2736:	31 05       	cpc	r19, r1
    2738:	2c f4       	brge	.+10     	; 0x2744 <GPIO_setupPortDirection+0x3e>
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	9c 81       	ldd	r25, Y+4	; 0x04
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	61 f0       	breq	.+24     	; 0x275a <GPIO_setupPortDirection+0x54>
    2742:	1e c0       	rjmp	.+60     	; 0x2780 <GPIO_setupPortDirection+0x7a>
    2744:	2b 81       	ldd	r18, Y+3	; 0x03
    2746:	3c 81       	ldd	r19, Y+4	; 0x04
    2748:	22 30       	cpi	r18, 0x02	; 2
    274a:	31 05       	cpc	r19, r1
    274c:	81 f0       	breq	.+32     	; 0x276e <GPIO_setupPortDirection+0x68>
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	9c 81       	ldd	r25, Y+4	; 0x04
    2752:	83 30       	cpi	r24, 0x03	; 3
    2754:	91 05       	cpc	r25, r1
    2756:	81 f0       	breq	.+32     	; 0x2778 <GPIO_setupPortDirection+0x72>
    2758:	13 c0       	rjmp	.+38     	; 0x2780 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    275a:	ea e3       	ldi	r30, 0x3A	; 58
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	80 83       	st	Z, r24
    2762:	0e c0       	rjmp	.+28     	; 0x2780 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2764:	e7 e3       	ldi	r30, 0x37	; 55
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	80 83       	st	Z, r24
    276c:	09 c0       	rjmp	.+18     	; 0x2780 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    276e:	e4 e3       	ldi	r30, 0x34	; 52
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	80 83       	st	Z, r24
    2776:	04 c0       	rjmp	.+8      	; 0x2780 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2778:	e1 e3       	ldi	r30, 0x31	; 49
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	00 d0       	rcall	.+0      	; 0x2794 <GPIO_writePort+0x6>
    2794:	00 d0       	rcall	.+0      	; 0x2796 <GPIO_writePort+0x8>
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	84 30       	cpi	r24, 0x04	; 4
    27a2:	90 f5       	brcc	.+100    	; 0x2808 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	3c 83       	std	Y+4, r19	; 0x04
    27ac:	2b 83       	std	Y+3, r18	; 0x03
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	9c 81       	ldd	r25, Y+4	; 0x04
    27b2:	81 30       	cpi	r24, 0x01	; 1
    27b4:	91 05       	cpc	r25, r1
    27b6:	d1 f0       	breq	.+52     	; 0x27ec <GPIO_writePort+0x5e>
    27b8:	2b 81       	ldd	r18, Y+3	; 0x03
    27ba:	3c 81       	ldd	r19, Y+4	; 0x04
    27bc:	22 30       	cpi	r18, 0x02	; 2
    27be:	31 05       	cpc	r19, r1
    27c0:	2c f4       	brge	.+10     	; 0x27cc <GPIO_writePort+0x3e>
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	9c 81       	ldd	r25, Y+4	; 0x04
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	61 f0       	breq	.+24     	; 0x27e2 <GPIO_writePort+0x54>
    27ca:	1e c0       	rjmp	.+60     	; 0x2808 <GPIO_writePort+0x7a>
    27cc:	2b 81       	ldd	r18, Y+3	; 0x03
    27ce:	3c 81       	ldd	r19, Y+4	; 0x04
    27d0:	22 30       	cpi	r18, 0x02	; 2
    27d2:	31 05       	cpc	r19, r1
    27d4:	81 f0       	breq	.+32     	; 0x27f6 <GPIO_writePort+0x68>
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	83 30       	cpi	r24, 0x03	; 3
    27dc:	91 05       	cpc	r25, r1
    27de:	81 f0       	breq	.+32     	; 0x2800 <GPIO_writePort+0x72>
    27e0:	13 c0       	rjmp	.+38     	; 0x2808 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    27e2:	eb e3       	ldi	r30, 0x3B	; 59
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	80 83       	st	Z, r24
    27ea:	0e c0       	rjmp	.+28     	; 0x2808 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    27ec:	e8 e3       	ldi	r30, 0x38	; 56
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	80 83       	st	Z, r24
    27f4:	09 c0       	rjmp	.+18     	; 0x2808 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    27f6:	e5 e3       	ldi	r30, 0x35	; 53
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	80 83       	st	Z, r24
    27fe:	04 c0       	rjmp	.+8      	; 0x2808 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2800:	e2 e3       	ldi	r30, 0x32	; 50
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	80 83       	st	Z, r24
			break;
		}
	}
}
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	00 d0       	rcall	.+0      	; 0x281c <GPIO_readPort+0x6>
    281c:	00 d0       	rcall	.+0      	; 0x281e <GPIO_readPort+0x8>
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2824:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	84 30       	cpi	r24, 0x04	; 4
    282a:	90 f5       	brcc	.+100    	; 0x2890 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	3c 83       	std	Y+4, r19	; 0x04
    2834:	2b 83       	std	Y+3, r18	; 0x03
    2836:	8b 81       	ldd	r24, Y+3	; 0x03
    2838:	9c 81       	ldd	r25, Y+4	; 0x04
    283a:	81 30       	cpi	r24, 0x01	; 1
    283c:	91 05       	cpc	r25, r1
    283e:	d1 f0       	breq	.+52     	; 0x2874 <GPIO_readPort+0x5e>
    2840:	2b 81       	ldd	r18, Y+3	; 0x03
    2842:	3c 81       	ldd	r19, Y+4	; 0x04
    2844:	22 30       	cpi	r18, 0x02	; 2
    2846:	31 05       	cpc	r19, r1
    2848:	2c f4       	brge	.+10     	; 0x2854 <GPIO_readPort+0x3e>
    284a:	8b 81       	ldd	r24, Y+3	; 0x03
    284c:	9c 81       	ldd	r25, Y+4	; 0x04
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	61 f0       	breq	.+24     	; 0x286a <GPIO_readPort+0x54>
    2852:	1e c0       	rjmp	.+60     	; 0x2890 <GPIO_readPort+0x7a>
    2854:	2b 81       	ldd	r18, Y+3	; 0x03
    2856:	3c 81       	ldd	r19, Y+4	; 0x04
    2858:	22 30       	cpi	r18, 0x02	; 2
    285a:	31 05       	cpc	r19, r1
    285c:	81 f0       	breq	.+32     	; 0x287e <GPIO_readPort+0x68>
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	9c 81       	ldd	r25, Y+4	; 0x04
    2862:	83 30       	cpi	r24, 0x03	; 3
    2864:	91 05       	cpc	r25, r1
    2866:	81 f0       	breq	.+32     	; 0x2888 <GPIO_readPort+0x72>
    2868:	13 c0       	rjmp	.+38     	; 0x2890 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    286a:	e9 e3       	ldi	r30, 0x39	; 57
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	89 83       	std	Y+1, r24	; 0x01
    2872:	0e c0       	rjmp	.+28     	; 0x2890 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2874:	e6 e3       	ldi	r30, 0x36	; 54
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	89 83       	std	Y+1, r24	; 0x01
    287c:	09 c0       	rjmp	.+18     	; 0x2890 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    287e:	e3 e3       	ldi	r30, 0x33	; 51
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	89 83       	std	Y+1, r24	; 0x01
    2886:	04 c0       	rjmp	.+8      	; 0x2890 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2888:	e0 e3       	ldi	r30, 0x30	; 48
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2890:	89 81       	ldd	r24, Y+1	; 0x01
}
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    28a0:	1f 92       	push	r1
    28a2:	0f 92       	push	r0
    28a4:	0f b6       	in	r0, 0x3f	; 63
    28a6:	0f 92       	push	r0
    28a8:	11 24       	eor	r1, r1
    28aa:	2f 93       	push	r18
    28ac:	3f 93       	push	r19
    28ae:	4f 93       	push	r20
    28b0:	5f 93       	push	r21
    28b2:	6f 93       	push	r22
    28b4:	7f 93       	push	r23
    28b6:	8f 93       	push	r24
    28b8:	9f 93       	push	r25
    28ba:	af 93       	push	r26
    28bc:	bf 93       	push	r27
    28be:	ef 93       	push	r30
    28c0:	ff 93       	push	r31
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    28ca:	80 91 88 01 	lds	r24, 0x0188
    28ce:	90 91 89 01 	lds	r25, 0x0189
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	29 f0       	breq	.+10     	; 0x28e0 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer0)();
    28d6:	e0 91 88 01 	lds	r30, 0x0188
    28da:	f0 91 89 01 	lds	r31, 0x0189
    28de:	09 95       	icall
	}
}
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	ff 91       	pop	r31
    28e6:	ef 91       	pop	r30
    28e8:	bf 91       	pop	r27
    28ea:	af 91       	pop	r26
    28ec:	9f 91       	pop	r25
    28ee:	8f 91       	pop	r24
    28f0:	7f 91       	pop	r23
    28f2:	6f 91       	pop	r22
    28f4:	5f 91       	pop	r21
    28f6:	4f 91       	pop	r20
    28f8:	3f 91       	pop	r19
    28fa:	2f 91       	pop	r18
    28fc:	0f 90       	pop	r0
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	0f 90       	pop	r0
    2902:	1f 90       	pop	r1
    2904:	18 95       	reti

00002906 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    2906:	1f 92       	push	r1
    2908:	0f 92       	push	r0
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	0f 92       	push	r0
    290e:	11 24       	eor	r1, r1
    2910:	2f 93       	push	r18
    2912:	3f 93       	push	r19
    2914:	4f 93       	push	r20
    2916:	5f 93       	push	r21
    2918:	6f 93       	push	r22
    291a:	7f 93       	push	r23
    291c:	8f 93       	push	r24
    291e:	9f 93       	push	r25
    2920:	af 93       	push	r26
    2922:	bf 93       	push	r27
    2924:	ef 93       	push	r30
    2926:	ff 93       	push	r31
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    2930:	80 91 88 01 	lds	r24, 0x0188
    2934:	90 91 89 01 	lds	r25, 0x0189
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	29 f0       	breq	.+10     	; 0x2946 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer0)();
    293c:	e0 91 88 01 	lds	r30, 0x0188
    2940:	f0 91 89 01 	lds	r31, 0x0189
    2944:	09 95       	icall
	}
}
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	ff 91       	pop	r31
    294c:	ef 91       	pop	r30
    294e:	bf 91       	pop	r27
    2950:	af 91       	pop	r26
    2952:	9f 91       	pop	r25
    2954:	8f 91       	pop	r24
    2956:	7f 91       	pop	r23
    2958:	6f 91       	pop	r22
    295a:	5f 91       	pop	r21
    295c:	4f 91       	pop	r20
    295e:	3f 91       	pop	r19
    2960:	2f 91       	pop	r18
    2962:	0f 90       	pop	r0
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	0f 90       	pop	r0
    2968:	1f 90       	pop	r1
    296a:	18 95       	reti

0000296c <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    296c:	1f 92       	push	r1
    296e:	0f 92       	push	r0
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	0f 92       	push	r0
    2974:	11 24       	eor	r1, r1
    2976:	2f 93       	push	r18
    2978:	3f 93       	push	r19
    297a:	4f 93       	push	r20
    297c:	5f 93       	push	r21
    297e:	6f 93       	push	r22
    2980:	7f 93       	push	r23
    2982:	8f 93       	push	r24
    2984:	9f 93       	push	r25
    2986:	af 93       	push	r26
    2988:	bf 93       	push	r27
    298a:	ef 93       	push	r30
    298c:	ff 93       	push	r31
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    2996:	80 91 8a 01 	lds	r24, 0x018A
    299a:	90 91 8b 01 	lds	r25, 0x018B
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	29 f0       	breq	.+10     	; 0x29ac <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer1)();
    29a2:	e0 91 8a 01 	lds	r30, 0x018A
    29a6:	f0 91 8b 01 	lds	r31, 0x018B
    29aa:	09 95       	icall
	}
}
    29ac:	cf 91       	pop	r28
    29ae:	df 91       	pop	r29
    29b0:	ff 91       	pop	r31
    29b2:	ef 91       	pop	r30
    29b4:	bf 91       	pop	r27
    29b6:	af 91       	pop	r26
    29b8:	9f 91       	pop	r25
    29ba:	8f 91       	pop	r24
    29bc:	7f 91       	pop	r23
    29be:	6f 91       	pop	r22
    29c0:	5f 91       	pop	r21
    29c2:	4f 91       	pop	r20
    29c4:	3f 91       	pop	r19
    29c6:	2f 91       	pop	r18
    29c8:	0f 90       	pop	r0
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	0f 90       	pop	r0
    29ce:	1f 90       	pop	r1
    29d0:	18 95       	reti

000029d2 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    29d2:	1f 92       	push	r1
    29d4:	0f 92       	push	r0
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	0f 92       	push	r0
    29da:	11 24       	eor	r1, r1
    29dc:	2f 93       	push	r18
    29de:	3f 93       	push	r19
    29e0:	4f 93       	push	r20
    29e2:	5f 93       	push	r21
    29e4:	6f 93       	push	r22
    29e6:	7f 93       	push	r23
    29e8:	8f 93       	push	r24
    29ea:	9f 93       	push	r25
    29ec:	af 93       	push	r26
    29ee:	bf 93       	push	r27
    29f0:	ef 93       	push	r30
    29f2:	ff 93       	push	r31
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    29fc:	80 91 8a 01 	lds	r24, 0x018A
    2a00:	90 91 8b 01 	lds	r25, 0x018B
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	29 f0       	breq	.+10     	; 0x2a12 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer1)();
    2a08:	e0 91 8a 01 	lds	r30, 0x018A
    2a0c:	f0 91 8b 01 	lds	r31, 0x018B
    2a10:	09 95       	icall
	}
}
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	ff 91       	pop	r31
    2a18:	ef 91       	pop	r30
    2a1a:	bf 91       	pop	r27
    2a1c:	af 91       	pop	r26
    2a1e:	9f 91       	pop	r25
    2a20:	8f 91       	pop	r24
    2a22:	7f 91       	pop	r23
    2a24:	6f 91       	pop	r22
    2a26:	5f 91       	pop	r21
    2a28:	4f 91       	pop	r20
    2a2a:	3f 91       	pop	r19
    2a2c:	2f 91       	pop	r18
    2a2e:	0f 90       	pop	r0
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	0f 90       	pop	r0
    2a34:	1f 90       	pop	r1
    2a36:	18 95       	reti

00002a38 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2a38:	1f 92       	push	r1
    2a3a:	0f 92       	push	r0
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	0f 92       	push	r0
    2a40:	11 24       	eor	r1, r1
    2a42:	2f 93       	push	r18
    2a44:	3f 93       	push	r19
    2a46:	4f 93       	push	r20
    2a48:	5f 93       	push	r21
    2a4a:	6f 93       	push	r22
    2a4c:	7f 93       	push	r23
    2a4e:	8f 93       	push	r24
    2a50:	9f 93       	push	r25
    2a52:	af 93       	push	r26
    2a54:	bf 93       	push	r27
    2a56:	ef 93       	push	r30
    2a58:	ff 93       	push	r31
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    2a62:	80 91 8c 01 	lds	r24, 0x018C
    2a66:	90 91 8d 01 	lds	r25, 0x018D
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	29 f0       	breq	.+10     	; 0x2a78 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer2)();
    2a6e:	e0 91 8c 01 	lds	r30, 0x018C
    2a72:	f0 91 8d 01 	lds	r31, 0x018D
    2a76:	09 95       	icall
	}
}
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	ff 91       	pop	r31
    2a7e:	ef 91       	pop	r30
    2a80:	bf 91       	pop	r27
    2a82:	af 91       	pop	r26
    2a84:	9f 91       	pop	r25
    2a86:	8f 91       	pop	r24
    2a88:	7f 91       	pop	r23
    2a8a:	6f 91       	pop	r22
    2a8c:	5f 91       	pop	r21
    2a8e:	4f 91       	pop	r20
    2a90:	3f 91       	pop	r19
    2a92:	2f 91       	pop	r18
    2a94:	0f 90       	pop	r0
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	0f 90       	pop	r0
    2a9a:	1f 90       	pop	r1
    2a9c:	18 95       	reti

00002a9e <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    2a9e:	1f 92       	push	r1
    2aa0:	0f 92       	push	r0
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	0f 92       	push	r0
    2aa6:	11 24       	eor	r1, r1
    2aa8:	2f 93       	push	r18
    2aaa:	3f 93       	push	r19
    2aac:	4f 93       	push	r20
    2aae:	5f 93       	push	r21
    2ab0:	6f 93       	push	r22
    2ab2:	7f 93       	push	r23
    2ab4:	8f 93       	push	r24
    2ab6:	9f 93       	push	r25
    2ab8:	af 93       	push	r26
    2aba:	bf 93       	push	r27
    2abc:	ef 93       	push	r30
    2abe:	ff 93       	push	r31
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    2ac8:	80 91 8c 01 	lds	r24, 0x018C
    2acc:	90 91 8d 01 	lds	r25, 0x018D
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	29 f0       	breq	.+10     	; 0x2ade <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer2)();
    2ad4:	e0 91 8c 01 	lds	r30, 0x018C
    2ad8:	f0 91 8d 01 	lds	r31, 0x018D
    2adc:	09 95       	icall
	}
}
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	ff 91       	pop	r31
    2ae4:	ef 91       	pop	r30
    2ae6:	bf 91       	pop	r27
    2ae8:	af 91       	pop	r26
    2aea:	9f 91       	pop	r25
    2aec:	8f 91       	pop	r24
    2aee:	7f 91       	pop	r23
    2af0:	6f 91       	pop	r22
    2af2:	5f 91       	pop	r21
    2af4:	4f 91       	pop	r20
    2af6:	3f 91       	pop	r19
    2af8:	2f 91       	pop	r18
    2afa:	0f 90       	pop	r0
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	0f 90       	pop	r0
    2b00:	1f 90       	pop	r1
    2b02:	18 95       	reti

00002b04 <TIMER_init>:
/*
 * Description: initialize the selected timer driver in the AVR
 *  according to the conifig-type structure
 */
void TIMER_init(const Timer_ConfigType * Config_Ptr)
{
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	00 d0       	rcall	.+0      	; 0x2b0a <TIMER_init+0x6>
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	9a 83       	std	Y+2, r25	; 0x02
    2b10:	89 83       	std	Y+1, r24	; 0x01
	/*timer0*/
	if(Config_Ptr->timer_id==TIMER_0)
    2b12:	e9 81       	ldd	r30, Y+1	; 0x01
    2b14:	fa 81       	ldd	r31, Y+2	; 0x02
    2b16:	80 81       	ld	r24, Z
    2b18:	88 23       	and	r24, r24
    2b1a:	09 f0       	breq	.+2      	; 0x2b1e <TIMER_init+0x1a>
    2b1c:	86 c0       	rjmp	.+268    	; 0x2c2a <TIMER_init+0x126>
	{
		/*timer0 overflow mode*/
		if(Config_Ptr->mode==NORMAL)
    2b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b20:	fa 81       	ldd	r31, Y+2	; 0x02
    2b22:	81 81       	ldd	r24, Z+1	; 0x01
    2b24:	88 23       	and	r24, r24
    2b26:	21 f5       	brne	.+72     	; 0x2b70 <TIMER_init+0x6c>
		{
			/* Set Timer initial value */
			TCNT0 = Config_Ptr->initialValue;
    2b28:	22 e5       	ldi	r18, 0x52	; 82
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b30:	85 81       	ldd	r24, Z+5	; 0x05
    2b32:	96 81       	ldd	r25, Z+6	; 0x06
    2b34:	a7 81       	ldd	r26, Z+7	; 0x07
    2b36:	b0 85       	ldd	r27, Z+8	; 0x08
    2b38:	f9 01       	movw	r30, r18
    2b3a:	80 83       	st	Z, r24
			/* Enable Timer0 Overflow Interrupt*/
			TIMSK = (1<<TOIE0);
    2b3c:	e9 e5       	ldi	r30, 0x59	; 89
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 * 4. clock = F_CPU/selected_prescaler using dynamic configuration
			 */
			TCCR0 = (1<<FOC0);
    2b44:	e3 e5       	ldi	r30, 0x53	; 83
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 e8       	ldi	r24, 0x80	; 128
    2b4a:	80 83       	st	Z, r24
			TCCR0 |=(TCCR0 & 0xF8)|(Config_Ptr->prescaler);
    2b4c:	a3 e5       	ldi	r26, 0x53	; 83
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e3 e5       	ldi	r30, 0x53	; 83
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	28 2f       	mov	r18, r24
    2b58:	e3 e5       	ldi	r30, 0x53	; 83
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	98 2f       	mov	r25, r24
    2b60:	98 7f       	andi	r25, 0xF8	; 248
    2b62:	e9 81       	ldd	r30, Y+1	; 0x01
    2b64:	fa 81       	ldd	r31, Y+2	; 0x02
    2b66:	82 81       	ldd	r24, Z+2	; 0x02
    2b68:	89 2b       	or	r24, r25
    2b6a:	82 2b       	or	r24, r18
    2b6c:	8c 93       	st	X, r24
    2b6e:	86 c1       	rjmp	.+780    	; 0x2e7c <TIMER_init+0x378>
		}
		/*timer0 compare mode*/
		else if(Config_Ptr->mode==CTC)
    2b70:	e9 81       	ldd	r30, Y+1	; 0x01
    2b72:	fa 81       	ldd	r31, Y+2	; 0x02
    2b74:	81 81       	ldd	r24, Z+1	; 0x01
    2b76:	81 30       	cpi	r24, 0x01	; 1
    2b78:	09 f0       	breq	.+2      	; 0x2b7c <TIMER_init+0x78>
    2b7a:	80 c1       	rjmp	.+768    	; 0x2e7c <TIMER_init+0x378>
		{
			/* Set Initial Value */
			TCNT0 = Config_Ptr->initialValue;
    2b7c:	22 e5       	ldi	r18, 0x52	; 82
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	e9 81       	ldd	r30, Y+1	; 0x01
    2b82:	fa 81       	ldd	r31, Y+2	; 0x02
    2b84:	85 81       	ldd	r24, Z+5	; 0x05
    2b86:	96 81       	ldd	r25, Z+6	; 0x06
    2b88:	a7 81       	ldd	r26, Z+7	; 0x07
    2b8a:	b0 85       	ldd	r27, Z+8	; 0x08
    2b8c:	f9 01       	movw	r30, r18
    2b8e:	80 83       	st	Z, r24
			/* Set Compare Value*/
			OCR0 = Config_Ptr->comparelValue;
    2b90:	2c e5       	ldi	r18, 0x5C	; 92
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	e9 81       	ldd	r30, Y+1	; 0x01
    2b96:	fa 81       	ldd	r31, Y+2	; 0x02
    2b98:	81 85       	ldd	r24, Z+9	; 0x09
    2b9a:	92 85       	ldd	r25, Z+10	; 0x0a
    2b9c:	a3 85       	ldd	r26, Z+11	; 0x0b
    2b9e:	b4 85       	ldd	r27, Z+12	; 0x0c
    2ba0:	f9 01       	movw	r30, r18
    2ba2:	80 83       	st	Z, r24
			/* Enable Timer0 output compare match Interrupt */
			TIMSK|=(1<<OCIE0);
    2ba4:	a9 e5       	ldi	r26, 0x59	; 89
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e9 e5       	ldi	r30, 0x59	; 89
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	82 60       	ori	r24, 0x02	; 2
    2bb0:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. selected compare output mode operation for COM00 & COM01 using dynamic configuration
			 * 4. clock = F_CPU/selected_prescaler using dynamic configuration
			 */
			TCCR0 = (1<<FOC0) | (1<<WGM01);
    2bb2:	e3 e5       	ldi	r30, 0x53	; 83
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	88 e8       	ldi	r24, 0x88	; 136
    2bb8:	80 83       	st	Z, r24
			TCCR0 |=(TCCR0 & 0xF8)|(Config_Ptr->prescaler);
    2bba:	a3 e5       	ldi	r26, 0x53	; 83
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e3 e5       	ldi	r30, 0x53	; 83
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	28 2f       	mov	r18, r24
    2bc6:	e3 e5       	ldi	r30, 0x53	; 83
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	98 2f       	mov	r25, r24
    2bce:	98 7f       	andi	r25, 0xF8	; 248
    2bd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd4:	82 81       	ldd	r24, Z+2	; 0x02
    2bd6:	89 2b       	or	r24, r25
    2bd8:	82 2b       	or	r24, r18
    2bda:	8c 93       	st	X, r24
			TCCR0 |=(TCCR0 & 0xCF)|((Config_Ptr->CompareOutputMode)<<4);
    2bdc:	a3 e5       	ldi	r26, 0x53	; 83
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	e3 e5       	ldi	r30, 0x53	; 83
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	38 2f       	mov	r19, r24
    2be8:	e3 e5       	ldi	r30, 0x53	; 83
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	28 2f       	mov	r18, r24
    2bf0:	2f 7c       	andi	r18, 0xCF	; 207
    2bf2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf6:	84 81       	ldd	r24, Z+4	; 0x04
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	82 95       	swap	r24
    2bfe:	92 95       	swap	r25
    2c00:	90 7f       	andi	r25, 0xF0	; 240
    2c02:	98 27       	eor	r25, r24
    2c04:	80 7f       	andi	r24, 0xF0	; 240
    2c06:	98 27       	eor	r25, r24
    2c08:	82 2b       	or	r24, r18
    2c0a:	83 2b       	or	r24, r19
    2c0c:	8c 93       	st	X, r24
			/*enable OC0 if the user set the configuration of the compare output mode to toggle,set or clear  */
			if(Config_Ptr->CompareOutputMode!=NORMAL_OC_DISCONNECT)
    2c0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c10:	fa 81       	ldd	r31, Y+2	; 0x02
    2c12:	84 81       	ldd	r24, Z+4	; 0x04
    2c14:	88 23       	and	r24, r24
    2c16:	09 f4       	brne	.+2      	; 0x2c1a <TIMER_init+0x116>
    2c18:	31 c1       	rjmp	.+610    	; 0x2e7c <TIMER_init+0x378>
			{
				SET_BIT(DDRB,PB3);/* Configure PB3/OC0 Pin as output pin*/
    2c1a:	a7 e3       	ldi	r26, 0x37	; 55
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e7 e3       	ldi	r30, 0x37	; 55
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	88 60       	ori	r24, 0x08	; 8
    2c26:	8c 93       	st	X, r24
    2c28:	29 c1       	rjmp	.+594    	; 0x2e7c <TIMER_init+0x378>
			}
		}
	}
	/*timer1*/
	else if(Config_Ptr->timer_id==TIMER_1)
    2c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2e:	80 81       	ld	r24, Z
    2c30:	81 30       	cpi	r24, 0x01	; 1
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <TIMER_init+0x132>
    2c34:	96 c0       	rjmp	.+300    	; 0x2d62 <TIMER_init+0x25e>
	{
		/*timer1 normal mode*/
		if(Config_Ptr->mode==NORMAL)
    2c36:	e9 81       	ldd	r30, Y+1	; 0x01
    2c38:	fa 81       	ldd	r31, Y+2	; 0x02
    2c3a:	81 81       	ldd	r24, Z+1	; 0x01
    2c3c:	88 23       	and	r24, r24
    2c3e:	41 f5       	brne	.+80     	; 0x2c90 <TIMER_init+0x18c>
		{
			/* Enable Timer1 Overflow Interrupt */
			TIMSK|=(1<<TOIE1);
    2c40:	a9 e5       	ldi	r26, 0x59	; 89
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	e9 e5       	ldi	r30, 0x59	; 89
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	84 60       	ori	r24, 0x04	; 4
    2c4c:	8c 93       	st	X, r24
			TCNT1 = Config_Ptr->initialValue; /* Set Timer initial value */
    2c4e:	2c e4       	ldi	r18, 0x4C	; 76
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	e9 81       	ldd	r30, Y+1	; 0x01
    2c54:	fa 81       	ldd	r31, Y+2	; 0x02
    2c56:	85 81       	ldd	r24, Z+5	; 0x05
    2c58:	96 81       	ldd	r25, Z+6	; 0x06
    2c5a:	a7 81       	ldd	r26, Z+7	; 0x07
    2c5c:	b0 85       	ldd	r27, Z+8	; 0x08
    2c5e:	f9 01       	movw	r30, r18
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC1A=1
			 * 2. Normal Mode WGM12=0 & WGM11=0 & WGM10=0
			 * 3. Normal Mode COM1A0=0 & COM1A1=0
			 * 4. clock = F_CPU/selected_prescaler using dynamic configuration
			 */
			TCCR1A = (1<<FOC1A);
    2c64:	ef e4       	ldi	r30, 0x4F	; 79
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	88 e0       	ldi	r24, 0x08	; 8
    2c6a:	80 83       	st	Z, r24
			TCCR1B |=(TCCR1B & 0xF8)|(Config_Ptr->prescaler);
    2c6c:	ae e4       	ldi	r26, 0x4E	; 78
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	ee e4       	ldi	r30, 0x4E	; 78
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	28 2f       	mov	r18, r24
    2c78:	ee e4       	ldi	r30, 0x4E	; 78
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	98 2f       	mov	r25, r24
    2c80:	98 7f       	andi	r25, 0xF8	; 248
    2c82:	e9 81       	ldd	r30, Y+1	; 0x01
    2c84:	fa 81       	ldd	r31, Y+2	; 0x02
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	89 2b       	or	r24, r25
    2c8a:	82 2b       	or	r24, r18
    2c8c:	8c 93       	st	X, r24
    2c8e:	f6 c0       	rjmp	.+492    	; 0x2e7c <TIMER_init+0x378>
		}
		/*timer1 compare mode*/
		else if(Config_Ptr->mode==CTC)
    2c90:	e9 81       	ldd	r30, Y+1	; 0x01
    2c92:	fa 81       	ldd	r31, Y+2	; 0x02
    2c94:	81 81       	ldd	r24, Z+1	; 0x01
    2c96:	81 30       	cpi	r24, 0x01	; 1
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <TIMER_init+0x198>
    2c9a:	f0 c0       	rjmp	.+480    	; 0x2e7c <TIMER_init+0x378>
		{
			 /* Enable Timer1 output compare match Interrupt */
			TIMSK|=(1<<OCIE1A);
    2c9c:	a9 e5       	ldi	r26, 0x59	; 89
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	e9 e5       	ldi	r30, 0x59	; 89
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	80 61       	ori	r24, 0x10	; 16
    2ca8:	8c 93       	st	X, r24
			TCNT1 = Config_Ptr->initialValue;  /* Set Initial Value */
    2caa:	2c e4       	ldi	r18, 0x4C	; 76
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb2:	85 81       	ldd	r24, Z+5	; 0x05
    2cb4:	96 81       	ldd	r25, Z+6	; 0x06
    2cb6:	a7 81       	ldd	r26, Z+7	; 0x07
    2cb8:	b0 85       	ldd	r27, Z+8	; 0x08
    2cba:	f9 01       	movw	r30, r18
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	80 83       	st	Z, r24
			OCR1A = Config_Ptr->comparelValue; /* Set Compare Value*/
    2cc0:	2a e4       	ldi	r18, 0x4A	; 74
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc8:	81 85       	ldd	r24, Z+9	; 0x09
    2cca:	92 85       	ldd	r25, Z+10	; 0x0a
    2ccc:	a3 85       	ldd	r26, Z+11	; 0x0b
    2cce:	b4 85       	ldd	r27, Z+12	; 0x0c
    2cd0:	f9 01       	movw	r30, r18
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC1A=1
			 * 2. CTC Mode WGM12=1 & WGM11=0 & WGM10=0
			 * 3. selected compare output mode operation for COM1A0 & COM1A1
			 * 4. clock = F_CPU/selected_prescaler using dynamic configuration
			 */
			TCCR1A = (1<<FOC1A);
    2cd6:	ef e4       	ldi	r30, 0x4F	; 79
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	88 e0       	ldi	r24, 0x08	; 8
    2cdc:	80 83       	st	Z, r24
			TCCR1B |=(1<<WGM12);
    2cde:	ae e4       	ldi	r26, 0x4E	; 78
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	ee e4       	ldi	r30, 0x4E	; 78
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	88 60       	ori	r24, 0x08	; 8
    2cea:	8c 93       	st	X, r24
			TCCR1A |=(TCCR1A & 0x3F)|((Config_Ptr->CompareOutputMode)<<6);
    2cec:	af e4       	ldi	r26, 0x4F	; 79
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	ef e4       	ldi	r30, 0x4F	; 79
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	38 2f       	mov	r19, r24
    2cf8:	ef e4       	ldi	r30, 0x4F	; 79
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	28 2f       	mov	r18, r24
    2d00:	2f 73       	andi	r18, 0x3F	; 63
    2d02:	e9 81       	ldd	r30, Y+1	; 0x01
    2d04:	fa 81       	ldd	r31, Y+2	; 0x02
    2d06:	84 81       	ldd	r24, Z+4	; 0x04
    2d08:	88 2f       	mov	r24, r24
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	00 24       	eor	r0, r0
    2d0e:	96 95       	lsr	r25
    2d10:	87 95       	ror	r24
    2d12:	07 94       	ror	r0
    2d14:	96 95       	lsr	r25
    2d16:	87 95       	ror	r24
    2d18:	07 94       	ror	r0
    2d1a:	98 2f       	mov	r25, r24
    2d1c:	80 2d       	mov	r24, r0
    2d1e:	82 2b       	or	r24, r18
    2d20:	83 2b       	or	r24, r19
    2d22:	8c 93       	st	X, r24
			TCCR1B |=(TCCR1B & 0xF8)|(Config_Ptr->prescaler);
    2d24:	ae e4       	ldi	r26, 0x4E	; 78
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	ee e4       	ldi	r30, 0x4E	; 78
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	28 2f       	mov	r18, r24
    2d30:	ee e4       	ldi	r30, 0x4E	; 78
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	98 2f       	mov	r25, r24
    2d38:	98 7f       	andi	r25, 0xF8	; 248
    2d3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d3e:	82 81       	ldd	r24, Z+2	; 0x02
    2d40:	89 2b       	or	r24, r25
    2d42:	82 2b       	or	r24, r18
    2d44:	8c 93       	st	X, r24
			/*enable OC1A if the user set the configuration of the compare output mode to toggle,set or clear  */
			if(Config_Ptr->CompareOutputMode!=NORMAL_OC_DISCONNECT)
    2d46:	e9 81       	ldd	r30, Y+1	; 0x01
    2d48:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4a:	84 81       	ldd	r24, Z+4	; 0x04
    2d4c:	88 23       	and	r24, r24
    2d4e:	09 f4       	brne	.+2      	; 0x2d52 <TIMER_init+0x24e>
    2d50:	95 c0       	rjmp	.+298    	; 0x2e7c <TIMER_init+0x378>
			{
				SET_BIT(DDRD,PD5);/* Configure PD5/OC1A Pin as output pin*/
    2d52:	a1 e3       	ldi	r26, 0x31	; 49
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e1 e3       	ldi	r30, 0x31	; 49
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	80 62       	ori	r24, 0x20	; 32
    2d5e:	8c 93       	st	X, r24
    2d60:	8d c0       	rjmp	.+282    	; 0x2e7c <TIMER_init+0x378>
			}
		}

	}
	/*timer 2*/
	else if(Config_Ptr->timer_id==TIMER_2)
    2d62:	e9 81       	ldd	r30, Y+1	; 0x01
    2d64:	fa 81       	ldd	r31, Y+2	; 0x02
    2d66:	80 81       	ld	r24, Z
    2d68:	82 30       	cpi	r24, 0x02	; 2
    2d6a:	09 f0       	breq	.+2      	; 0x2d6e <TIMER_init+0x26a>
    2d6c:	87 c0       	rjmp	.+270    	; 0x2e7c <TIMER_init+0x378>
	{
		/*timer2 normal mode */
		if(Config_Ptr->mode==NORMAL)
    2d6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d70:	fa 81       	ldd	r31, Y+2	; 0x02
    2d72:	81 81       	ldd	r24, Z+1	; 0x01
    2d74:	88 23       	and	r24, r24
    2d76:	39 f5       	brne	.+78     	; 0x2dc6 <TIMER_init+0x2c2>
		{
			TCNT2 = Config_Ptr->initialValue; /* Set Timer initial value */
    2d78:	24 e4       	ldi	r18, 0x44	; 68
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d80:	85 81       	ldd	r24, Z+5	; 0x05
    2d82:	96 81       	ldd	r25, Z+6	; 0x06
    2d84:	a7 81       	ldd	r26, Z+7	; 0x07
    2d86:	b0 85       	ldd	r27, Z+8	; 0x08
    2d88:	f9 01       	movw	r30, r18
    2d8a:	80 83       	st	Z, r24
			/* Enable Timer2 Overflow Interrupt */
			TIMSK|=(1<<TOIE2);
    2d8c:	a9 e5       	ldi	r26, 0x59	; 89
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	e9 e5       	ldi	r30, 0x59	; 89
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	80 64       	ori	r24, 0x40	; 64
    2d98:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC2=1
			 * 2. Normal Mode WGM21=0 & WGM20=0
			 * 3. Normal Mode COM20=0 & COM21=0
			 * 4. clock = F_CPU/selected_prescaler using dynamic configuration
			 */
			TCCR2 = (1<<FOC2) ;
    2d9a:	e5 e4       	ldi	r30, 0x45	; 69
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 e8       	ldi	r24, 0x80	; 128
    2da0:	80 83       	st	Z, r24
			TCCR2 |=(TCCR2 & 0xF8)|(Config_Ptr->prescaler2);
    2da2:	a5 e4       	ldi	r26, 0x45	; 69
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e5 e4       	ldi	r30, 0x45	; 69
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	28 2f       	mov	r18, r24
    2dae:	e5 e4       	ldi	r30, 0x45	; 69
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	98 2f       	mov	r25, r24
    2db6:	98 7f       	andi	r25, 0xF8	; 248
    2db8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dba:	fa 81       	ldd	r31, Y+2	; 0x02
    2dbc:	83 81       	ldd	r24, Z+3	; 0x03
    2dbe:	89 2b       	or	r24, r25
    2dc0:	82 2b       	or	r24, r18
    2dc2:	8c 93       	st	X, r24
    2dc4:	5b c0       	rjmp	.+182    	; 0x2e7c <TIMER_init+0x378>
		}
		/*timer 2 compare mode*/
		else if(Config_Ptr->mode==CTC)
    2dc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2dca:	81 81       	ldd	r24, Z+1	; 0x01
    2dcc:	81 30       	cpi	r24, 0x01	; 1
    2dce:	09 f0       	breq	.+2      	; 0x2dd2 <TIMER_init+0x2ce>
    2dd0:	55 c0       	rjmp	.+170    	; 0x2e7c <TIMER_init+0x378>
		{
			/* Enable Timer2 compare Interrupt */
			TIMSK|=(1<<OCIE2);
    2dd2:	a9 e5       	ldi	r26, 0x59	; 89
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	e9 e5       	ldi	r30, 0x59	; 89
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	80 68       	ori	r24, 0x80	; 128
    2dde:	8c 93       	st	X, r24
			/* Set Initial Value */
			TCNT2 = Config_Ptr->initialValue;
    2de0:	24 e4       	ldi	r18, 0x44	; 68
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	e9 81       	ldd	r30, Y+1	; 0x01
    2de6:	fa 81       	ldd	r31, Y+2	; 0x02
    2de8:	85 81       	ldd	r24, Z+5	; 0x05
    2dea:	96 81       	ldd	r25, Z+6	; 0x06
    2dec:	a7 81       	ldd	r26, Z+7	; 0x07
    2dee:	b0 85       	ldd	r27, Z+8	; 0x08
    2df0:	f9 01       	movw	r30, r18
    2df2:	80 83       	st	Z, r24
			/* Set Compare Value*/
			OCR2 = Config_Ptr->comparelValue;
    2df4:	23 e4       	ldi	r18, 0x43	; 67
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    2dfc:	81 85       	ldd	r24, Z+9	; 0x09
    2dfe:	92 85       	ldd	r25, Z+10	; 0x0a
    2e00:	a3 85       	ldd	r26, Z+11	; 0x0b
    2e02:	b4 85       	ldd	r27, Z+12	; 0x0c
    2e04:	f9 01       	movw	r30, r18
    2e06:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC2=1
			 * 2. CTC Mode WGM21=1 & WGM20=0
			 * 3. selected compare output mode operation for  COM20 & COM21
			 * 4. clock = F_CPU/selected_prescaler using dynamic configuration
			 */
			TCCR2 = (1<<FOC2) | (1<<WGM21);
    2e08:	e5 e4       	ldi	r30, 0x45	; 69
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	88 e8       	ldi	r24, 0x88	; 136
    2e0e:	80 83       	st	Z, r24
			TCCR2 |=(TCCR2 & 0xCF)|((Config_Ptr->CompareOutputMode)<<4);
    2e10:	a5 e4       	ldi	r26, 0x45	; 69
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e5 e4       	ldi	r30, 0x45	; 69
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	38 2f       	mov	r19, r24
    2e1c:	e5 e4       	ldi	r30, 0x45	; 69
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	28 2f       	mov	r18, r24
    2e24:	2f 7c       	andi	r18, 0xCF	; 207
    2e26:	e9 81       	ldd	r30, Y+1	; 0x01
    2e28:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2a:	84 81       	ldd	r24, Z+4	; 0x04
    2e2c:	88 2f       	mov	r24, r24
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	82 95       	swap	r24
    2e32:	92 95       	swap	r25
    2e34:	90 7f       	andi	r25, 0xF0	; 240
    2e36:	98 27       	eor	r25, r24
    2e38:	80 7f       	andi	r24, 0xF0	; 240
    2e3a:	98 27       	eor	r25, r24
    2e3c:	82 2b       	or	r24, r18
    2e3e:	83 2b       	or	r24, r19
    2e40:	8c 93       	st	X, r24
			TCCR2 |=(TCCR2 & 0xF8)|(Config_Ptr->prescaler2);
    2e42:	a5 e4       	ldi	r26, 0x45	; 69
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	e5 e4       	ldi	r30, 0x45	; 69
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 81       	ld	r24, Z
    2e4c:	28 2f       	mov	r18, r24
    2e4e:	e5 e4       	ldi	r30, 0x45	; 69
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	98 2f       	mov	r25, r24
    2e56:	98 7f       	andi	r25, 0xF8	; 248
    2e58:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e5c:	83 81       	ldd	r24, Z+3	; 0x03
    2e5e:	89 2b       	or	r24, r25
    2e60:	82 2b       	or	r24, r18
    2e62:	8c 93       	st	X, r24
			/*enable OC2 if the user set the configuration of the compare output mode to toggle,set or clear  */
			if(Config_Ptr->CompareOutputMode!=NORMAL_OC_DISCONNECT)
    2e64:	e9 81       	ldd	r30, Y+1	; 0x01
    2e66:	fa 81       	ldd	r31, Y+2	; 0x02
    2e68:	84 81       	ldd	r24, Z+4	; 0x04
    2e6a:	88 23       	and	r24, r24
    2e6c:	39 f0       	breq	.+14     	; 0x2e7c <TIMER_init+0x378>
			{
				/* Configure PD7/OC2 Pin as output pin*/
				SET_BIT(DDRD,PD7);
    2e6e:	a1 e3       	ldi	r26, 0x31	; 49
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	e1 e3       	ldi	r30, 0x31	; 49
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	80 68       	ori	r24, 0x80	; 128
    2e7a:	8c 93       	st	X, r24
			}
		}
	}
}
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	08 95       	ret

00002e86 <TIMER0_setCallBack>:
/*
 * Description:
 * Save the address of the Call back function for timer 0 in a global variable
 */
void TIMER0_setCallBack(void(*a_ptr0)(void))
{
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <TIMER0_setCallBack+0x6>
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	9a 83       	std	Y+2, r25	; 0x02
    2e92:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_timer0 = a_ptr0;
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	9a 81       	ldd	r25, Y+2	; 0x02
    2e98:	90 93 89 01 	sts	0x0189, r25
    2e9c:	80 93 88 01 	sts	0x0188, r24
}
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	08 95       	ret

00002eaa <TIMER1_setCallBack>:
/*
 * Description:
 * Save the address of the Call back function for timer 1 in a global variable
 */
void TIMER1_setCallBack(void(*a_ptr1)(void))
{
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <TIMER1_setCallBack+0x6>
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	9a 83       	std	Y+2, r25	; 0x02
    2eb6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_timer1 = a_ptr1;
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebc:	90 93 8b 01 	sts	0x018B, r25
    2ec0:	80 93 8a 01 	sts	0x018A, r24
}
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	08 95       	ret

00002ece <TIMER2_setCallBack>:
/*
 * Description:
 * Save the address of the Call back function for timer 2 in a global variable
 */
void TIMER2_setCallBack(void(*a_ptr2)(void))
{
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	00 d0       	rcall	.+0      	; 0x2ed4 <TIMER2_setCallBack+0x6>
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	9a 83       	std	Y+2, r25	; 0x02
    2eda:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_timer2 = a_ptr2;
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee0:	90 93 8d 01 	sts	0x018D, r25
    2ee4:	80 93 8c 01 	sts	0x018C, r24
}
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <TIMER_deinit>:
/*
 * Description:
 * closing the selected timer driver by clearing the clock
 */
void TIMER_deinit(const Timer_ConfigType * Config_Ptr)
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	00 d0       	rcall	.+0      	; 0x2ef8 <TIMER_deinit+0x6>
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    2efc:	9a 83       	std	Y+2, r25	; 0x02
    2efe:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->timer_id==TIMER_0)
    2f00:	e9 81       	ldd	r30, Y+1	; 0x01
    2f02:	fa 81       	ldd	r31, Y+2	; 0x02
    2f04:	80 81       	ld	r24, Z
    2f06:	88 23       	and	r24, r24
    2f08:	41 f4       	brne	.+16     	; 0x2f1a <TIMER_deinit+0x28>
	{
		TCCR0 = (TCCR0 & 0xF8);
    2f0a:	a3 e5       	ldi	r26, 0x53	; 83
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e3 e5       	ldi	r30, 0x53	; 83
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	88 7f       	andi	r24, 0xF8	; 248
    2f16:	8c 93       	st	X, r24
    2f18:	19 c0       	rjmp	.+50     	; 0x2f4c <TIMER_deinit+0x5a>
	}
	else if(Config_Ptr->timer_id==TIMER_1)
    2f1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1e:	80 81       	ld	r24, Z
    2f20:	81 30       	cpi	r24, 0x01	; 1
    2f22:	41 f4       	brne	.+16     	; 0x2f34 <TIMER_deinit+0x42>
	{
		TCCR1B = (TCCR1B & 0xF8);
    2f24:	ae e4       	ldi	r26, 0x4E	; 78
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	ee e4       	ldi	r30, 0x4E	; 78
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	88 7f       	andi	r24, 0xF8	; 248
    2f30:	8c 93       	st	X, r24
    2f32:	0c c0       	rjmp	.+24     	; 0x2f4c <TIMER_deinit+0x5a>
	}
	else if(Config_Ptr->timer_id==TIMER_2)
    2f34:	e9 81       	ldd	r30, Y+1	; 0x01
    2f36:	fa 81       	ldd	r31, Y+2	; 0x02
    2f38:	80 81       	ld	r24, Z
    2f3a:	82 30       	cpi	r24, 0x02	; 2
    2f3c:	39 f4       	brne	.+14     	; 0x2f4c <TIMER_deinit+0x5a>
	{
		TCCR2 = (TCCR2 & 0xF8);
    2f3e:	a5 e4       	ldi	r26, 0x45	; 69
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e5 e4       	ldi	r30, 0x45	; 69
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	88 7f       	andi	r24, 0xF8	; 248
    2f4a:	8c 93       	st	X, r24
	}
}
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const Twi_ConfigType * Config_Ptr)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	00 d0       	rcall	.+0      	; 0x2f5c <TWI_init+0x6>
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
    2f60:	9a 83       	std	Y+2, r25	; 0x02
    2f62:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bitRate;
    2f64:	a0 e2       	ldi	r26, 0x20	; 32
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6c:	80 81       	ld	r24, Z
    2f6e:	8c 93       	st	X, r24
	TWSR = (TWSR & 0xFC)|(Config_Ptr->prescaler);
    2f70:	a1 e2       	ldi	r26, 0x21	; 33
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	e1 e2       	ldi	r30, 0x21	; 33
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	98 2f       	mov	r25, r24
    2f7c:	9c 7f       	andi	r25, 0xFC	; 252
    2f7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f80:	fa 81       	ldd	r31, Y+2	; 0x02
    2f82:	81 81       	ldd	r24, Z+1	; 0x01
    2f84:	89 2b       	or	r24, r25
    2f86:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (TWAR & 0x01)|((Config_Ptr->slaveAddress)<<1); // my address = 0x01 :)
    2f88:	a2 e2       	ldi	r26, 0x22	; 34
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	e2 e2       	ldi	r30, 0x22	; 34
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	28 2f       	mov	r18, r24
    2f94:	21 70       	andi	r18, 0x01	; 1
    2f96:	e9 81       	ldd	r30, Y+1	; 0x01
    2f98:	fa 81       	ldd	r31, Y+2	; 0x02
    2f9a:	82 81       	ldd	r24, Z+2	; 0x02
    2f9c:	88 2f       	mov	r24, r24
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	82 2b       	or	r24, r18
    2fa6:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2fa8:	e6 e5       	ldi	r30, 0x56	; 86
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	84 e0       	ldi	r24, 0x04	; 4
    2fae:	80 83       	st	Z, r24
}
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	08 95       	ret

00002fba <TWI_start>:

void TWI_start(void)
{
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2fc2:	e6 e5       	ldi	r30, 0x56	; 86
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	84 ea       	ldi	r24, 0xA4	; 164
    2fc8:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2fca:	e6 e5       	ldi	r30, 0x56	; 86
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	88 23       	and	r24, r24
    2fd2:	dc f7       	brge	.-10     	; 0x2fca <TWI_start+0x10>
}
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	08 95       	ret

00002fda <TWI_stop>:

void TWI_stop(void)
{
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2fe2:	e6 e5       	ldi	r30, 0x56	; 86
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	84 e9       	ldi	r24, 0x94	; 148
    2fe8:	80 83       	st	Z, r24
}
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	0f 92       	push	r0
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2ffc:	e3 e2       	ldi	r30, 0x23	; 35
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    3004:	e6 e5       	ldi	r30, 0x56	; 86
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	84 e8       	ldi	r24, 0x84	; 132
    300a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    300c:	e6 e5       	ldi	r30, 0x56	; 86
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	80 81       	ld	r24, Z
    3012:	88 23       	and	r24, r24
    3014:	dc f7       	brge	.-10     	; 0x300c <TWI_writeByte+0x1c>
}
    3016:	0f 90       	pop	r0
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	08 95       	ret

0000301e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    301e:	df 93       	push	r29
    3020:	cf 93       	push	r28
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    3026:	e6 e5       	ldi	r30, 0x56	; 86
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	84 ec       	ldi	r24, 0xC4	; 196
    302c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    302e:	e6 e5       	ldi	r30, 0x56	; 86
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 81       	ld	r24, Z
    3034:	88 23       	and	r24, r24
    3036:	dc f7       	brge	.-10     	; 0x302e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    3038:	e3 e2       	ldi	r30, 0x23	; 35
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
}
    303e:	cf 91       	pop	r28
    3040:	df 91       	pop	r29
    3042:	08 95       	ret

00003044 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    3044:	df 93       	push	r29
    3046:	cf 93       	push	r28
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    304c:	e6 e5       	ldi	r30, 0x56	; 86
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	84 e8       	ldi	r24, 0x84	; 132
    3052:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3054:	e6 e5       	ldi	r30, 0x56	; 86
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	88 23       	and	r24, r24
    305c:	dc f7       	brge	.-10     	; 0x3054 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    305e:	e3 e2       	ldi	r30, 0x23	; 35
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
}
    3064:	cf 91       	pop	r28
    3066:	df 91       	pop	r29
    3068:	08 95       	ret

0000306a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    306a:	df 93       	push	r29
    306c:	cf 93       	push	r28
    306e:	0f 92       	push	r0
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    3074:	e1 e2       	ldi	r30, 0x21	; 33
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	88 7f       	andi	r24, 0xF8	; 248
    307c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    307e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3080:	0f 90       	pop	r0
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	08 95       	ret

00003088 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    3088:	2f 92       	push	r2
    308a:	3f 92       	push	r3
    308c:	4f 92       	push	r4
    308e:	5f 92       	push	r5
    3090:	6f 92       	push	r6
    3092:	7f 92       	push	r7
    3094:	8f 92       	push	r8
    3096:	9f 92       	push	r9
    3098:	af 92       	push	r10
    309a:	bf 92       	push	r11
    309c:	cf 92       	push	r12
    309e:	df 92       	push	r13
    30a0:	ef 92       	push	r14
    30a2:	ff 92       	push	r15
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
    30a8:	df 93       	push	r29
    30aa:	cf 93       	push	r28
    30ac:	00 d0       	rcall	.+0      	; 0x30ae <UART_init+0x26>
    30ae:	00 d0       	rcall	.+0      	; 0x30b0 <UART_init+0x28>
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
    30b4:	9c 83       	std	Y+4, r25	; 0x04
    30b6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    30b8:	1a 82       	std	Y+2, r1	; 0x02
    30ba:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    30bc:	eb e2       	ldi	r30, 0x2B	; 43
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	82 e0       	ldi	r24, 0x02	; 2
    30c2:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    30c4:	ea e2       	ldi	r30, 0x2A	; 42
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	88 e1       	ldi	r24, 0x18	; 24
    30ca:	80 83       	st	Z, r24
	
	if(_9_BITS==(Config_Ptr->parityMode))
    30cc:	eb 81       	ldd	r30, Y+3	; 0x03
    30ce:	fc 81       	ldd	r31, Y+4	; 0x04
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	87 30       	cpi	r24, 0x07	; 7
    30d4:	39 f4       	brne	.+14     	; 0x30e4 <UART_init+0x5c>
	{/*RXB8 & TXB8  used for 9-bit data mode*/
		UCSRB |=(1<<RXB8) |(1<<TXB8);
    30d6:	aa e2       	ldi	r26, 0x2A	; 42
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	ea e2       	ldi	r30, 0x2A	; 42
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	83 60       	ori	r24, 0x03	; 3
    30e2:	8c 93       	st	X, r24
	 * UCPOL   = 0 Used with the Synchronous operation only
	 * inserting the parity mode bits in register UCSRC according to the dynamic configuration
	 * inserting the number of stop bits in register UCSRC according to the dynamic configuration
	 * inserting the character size bits in both registers UCSRC & UCSRB according to the dynamic configuration
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    30e4:	e0 e4       	ldi	r30, 0x40	; 64
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 e8       	ldi	r24, 0x80	; 128
    30ea:	80 83       	st	Z, r24
	UCSRC|=(UCSRC & 0xCF)|((Config_Ptr->parityMode)<<4);
    30ec:	a0 e4       	ldi	r26, 0x40	; 64
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e0 e4       	ldi	r30, 0x40	; 64
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	38 2f       	mov	r19, r24
    30f8:	e0 e4       	ldi	r30, 0x40	; 64
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	28 2f       	mov	r18, r24
    3100:	2f 7c       	andi	r18, 0xCF	; 207
    3102:	eb 81       	ldd	r30, Y+3	; 0x03
    3104:	fc 81       	ldd	r31, Y+4	; 0x04
    3106:	82 81       	ldd	r24, Z+2	; 0x02
    3108:	88 2f       	mov	r24, r24
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	82 95       	swap	r24
    310e:	92 95       	swap	r25
    3110:	90 7f       	andi	r25, 0xF0	; 240
    3112:	98 27       	eor	r25, r24
    3114:	80 7f       	andi	r24, 0xF0	; 240
    3116:	98 27       	eor	r25, r24
    3118:	82 2b       	or	r24, r18
    311a:	83 2b       	or	r24, r19
    311c:	8c 93       	st	X, r24
	UCSRC|=(UCSRC & 0xF7)|((Config_Ptr->stopBit)<<3);
    311e:	a0 e4       	ldi	r26, 0x40	; 64
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	e0 e4       	ldi	r30, 0x40	; 64
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	38 2f       	mov	r19, r24
    312a:	e0 e4       	ldi	r30, 0x40	; 64
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	28 2f       	mov	r18, r24
    3132:	27 7f       	andi	r18, 0xF7	; 247
    3134:	eb 81       	ldd	r30, Y+3	; 0x03
    3136:	fc 81       	ldd	r31, Y+4	; 0x04
    3138:	81 81       	ldd	r24, Z+1	; 0x01
    313a:	88 2f       	mov	r24, r24
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	88 0f       	add	r24, r24
    3140:	99 1f       	adc	r25, r25
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	88 0f       	add	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	82 2b       	or	r24, r18
    314c:	83 2b       	or	r24, r19
    314e:	8c 93       	st	X, r24
	UCSRC|=(UCSRC & 0xF9)|(((Config_Ptr->characterSize) & 0x03)<<1);
    3150:	a0 e4       	ldi	r26, 0x40	; 64
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	e0 e4       	ldi	r30, 0x40	; 64
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	38 2f       	mov	r19, r24
    315c:	e0 e4       	ldi	r30, 0x40	; 64
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	28 2f       	mov	r18, r24
    3164:	29 7f       	andi	r18, 0xF9	; 249
    3166:	eb 81       	ldd	r30, Y+3	; 0x03
    3168:	fc 81       	ldd	r31, Y+4	; 0x04
    316a:	80 81       	ld	r24, Z
    316c:	88 2f       	mov	r24, r24
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	83 70       	andi	r24, 0x03	; 3
    3172:	90 70       	andi	r25, 0x00	; 0
    3174:	88 0f       	add	r24, r24
    3176:	99 1f       	adc	r25, r25
    3178:	82 2b       	or	r24, r18
    317a:	83 2b       	or	r24, r19
    317c:	8c 93       	st	X, r24
	UCSRB|=(UCSRB & 0xFB)|(((Config_Ptr->characterSize) & 0x04)<<2);
    317e:	aa e2       	ldi	r26, 0x2A	; 42
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	ea e2       	ldi	r30, 0x2A	; 42
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	38 2f       	mov	r19, r24
    318a:	ea e2       	ldi	r30, 0x2A	; 42
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	28 2f       	mov	r18, r24
    3192:	2b 7f       	andi	r18, 0xFB	; 251
    3194:	eb 81       	ldd	r30, Y+3	; 0x03
    3196:	fc 81       	ldd	r31, Y+4	; 0x04
    3198:	80 81       	ld	r24, Z
    319a:	88 2f       	mov	r24, r24
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	84 70       	andi	r24, 0x04	; 4
    31a0:	90 70       	andi	r25, 0x00	; 0
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	82 2b       	or	r24, r18
    31ac:	83 2b       	or	r24, r19
    31ae:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudRate * 8UL))) - 1);
    31b0:	eb 81       	ldd	r30, Y+3	; 0x03
    31b2:	fc 81       	ldd	r31, Y+4	; 0x04
    31b4:	a3 80       	ldd	r10, Z+3	; 0x03
    31b6:	b4 80       	ldd	r11, Z+4	; 0x04
    31b8:	c5 80       	ldd	r12, Z+5	; 0x05
    31ba:	d6 80       	ldd	r13, Z+6	; 0x06
    31bc:	e7 80       	ldd	r14, Z+7	; 0x07
    31be:	f0 84       	ldd	r15, Z+8	; 0x08
    31c0:	01 85       	ldd	r16, Z+9	; 0x09
    31c2:	12 85       	ldd	r17, Z+10	; 0x0a
    31c4:	2a 2d       	mov	r18, r10
    31c6:	3b 2d       	mov	r19, r11
    31c8:	4c 2d       	mov	r20, r12
    31ca:	5d 2d       	mov	r21, r13
    31cc:	6e 2d       	mov	r22, r14
    31ce:	7f 2d       	mov	r23, r15
    31d0:	80 2f       	mov	r24, r16
    31d2:	91 2f       	mov	r25, r17
    31d4:	03 e0       	ldi	r16, 0x03	; 3
    31d6:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    31da:	a2 2e       	mov	r10, r18
    31dc:	b3 2e       	mov	r11, r19
    31de:	c4 2e       	mov	r12, r20
    31e0:	d5 2e       	mov	r13, r21
    31e2:	e6 2e       	mov	r14, r22
    31e4:	f7 2e       	mov	r15, r23
    31e6:	08 2f       	mov	r16, r24
    31e8:	19 2f       	mov	r17, r25
    31ea:	2a 2c       	mov	r2, r10
    31ec:	3b 2c       	mov	r3, r11
    31ee:	4c 2c       	mov	r4, r12
    31f0:	5d 2c       	mov	r5, r13
    31f2:	6e 2c       	mov	r6, r14
    31f4:	7f 2c       	mov	r7, r15
    31f6:	80 2e       	mov	r8, r16
    31f8:	91 2e       	mov	r9, r17
    31fa:	20 e4       	ldi	r18, 0x40	; 64
    31fc:	32 e4       	ldi	r19, 0x42	; 66
    31fe:	4f e0       	ldi	r20, 0x0F	; 15
    3200:	50 e0       	ldi	r21, 0x00	; 0
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	70 e0       	ldi	r23, 0x00	; 0
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	a2 2c       	mov	r10, r2
    320c:	b3 2c       	mov	r11, r3
    320e:	c4 2c       	mov	r12, r4
    3210:	d5 2c       	mov	r13, r5
    3212:	e6 2c       	mov	r14, r6
    3214:	f7 2c       	mov	r15, r7
    3216:	08 2d       	mov	r16, r8
    3218:	19 2d       	mov	r17, r9
    321a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    321e:	a2 2e       	mov	r10, r18
    3220:	b3 2e       	mov	r11, r19
    3222:	c4 2e       	mov	r12, r20
    3224:	d5 2e       	mov	r13, r21
    3226:	e6 2e       	mov	r14, r22
    3228:	f7 2e       	mov	r15, r23
    322a:	08 2f       	mov	r16, r24
    322c:	19 2f       	mov	r17, r25
    322e:	2a 2d       	mov	r18, r10
    3230:	3b 2d       	mov	r19, r11
    3232:	4c 2d       	mov	r20, r12
    3234:	5d 2d       	mov	r21, r13
    3236:	6e 2d       	mov	r22, r14
    3238:	7f 2d       	mov	r23, r15
    323a:	80 2f       	mov	r24, r16
    323c:	91 2f       	mov	r25, r17
    323e:	c9 01       	movw	r24, r18
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	9a 83       	std	Y+2, r25	; 0x02
    3244:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3246:	e0 e4       	ldi	r30, 0x40	; 64
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	9a 81       	ldd	r25, Y+2	; 0x02
    324e:	89 2f       	mov	r24, r25
    3250:	99 27       	eor	r25, r25
    3252:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3254:	e9 e2       	ldi	r30, 0x29	; 41
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	80 83       	st	Z, r24
}
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	cf 91       	pop	r28
    3266:	df 91       	pop	r29
    3268:	1f 91       	pop	r17
    326a:	0f 91       	pop	r16
    326c:	ff 90       	pop	r15
    326e:	ef 90       	pop	r14
    3270:	df 90       	pop	r13
    3272:	cf 90       	pop	r12
    3274:	bf 90       	pop	r11
    3276:	af 90       	pop	r10
    3278:	9f 90       	pop	r9
    327a:	8f 90       	pop	r8
    327c:	7f 90       	pop	r7
    327e:	6f 90       	pop	r6
    3280:	5f 90       	pop	r5
    3282:	4f 90       	pop	r4
    3284:	3f 90       	pop	r3
    3286:	2f 90       	pop	r2
    3288:	08 95       	ret

0000328a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    328a:	df 93       	push	r29
    328c:	cf 93       	push	r28
    328e:	0f 92       	push	r0
    3290:	cd b7       	in	r28, 0x3d	; 61
    3292:	de b7       	in	r29, 0x3e	; 62
    3294:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3296:	eb e2       	ldi	r30, 0x2B	; 43
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	80 81       	ld	r24, Z
    329c:	88 2f       	mov	r24, r24
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	80 72       	andi	r24, 0x20	; 32
    32a2:	90 70       	andi	r25, 0x00	; 0
    32a4:	00 97       	sbiw	r24, 0x00	; 0
    32a6:	b9 f3       	breq	.-18     	; 0x3296 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    32a8:	ec e2       	ldi	r30, 0x2C	; 44
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    32b0:	0f 90       	pop	r0
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	08 95       	ret

000032b8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    32b8:	df 93       	push	r29
    32ba:	cf 93       	push	r28
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    32c0:	eb e2       	ldi	r30, 0x2B	; 43
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	80 81       	ld	r24, Z
    32c6:	88 23       	and	r24, r24
    32c8:	dc f7       	brge	.-10     	; 0x32c0 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    32ca:	ec e2       	ldi	r30, 0x2C	; 44
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
}
    32d0:	cf 91       	pop	r28
    32d2:	df 91       	pop	r29
    32d4:	08 95       	ret

000032d6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    32d6:	df 93       	push	r29
    32d8:	cf 93       	push	r28
    32da:	00 d0       	rcall	.+0      	; 0x32dc <UART_sendString+0x6>
    32dc:	0f 92       	push	r0
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
    32e2:	9b 83       	std	Y+3, r25	; 0x03
    32e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32e6:	19 82       	std	Y+1, r1	; 0x01
    32e8:	0e c0       	rjmp	.+28     	; 0x3306 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	28 2f       	mov	r18, r24
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	8a 81       	ldd	r24, Y+2	; 0x02
    32f2:	9b 81       	ldd	r25, Y+3	; 0x03
    32f4:	fc 01       	movw	r30, r24
    32f6:	e2 0f       	add	r30, r18
    32f8:	f3 1f       	adc	r31, r19
    32fa:	80 81       	ld	r24, Z
    32fc:	0e 94 45 19 	call	0x328a	; 0x328a <UART_sendByte>
		i++;
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	8f 5f       	subi	r24, 0xFF	; 255
    3304:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	28 2f       	mov	r18, r24
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	9b 81       	ldd	r25, Y+3	; 0x03
    3310:	fc 01       	movw	r30, r24
    3312:	e2 0f       	add	r30, r18
    3314:	f3 1f       	adc	r31, r19
    3316:	80 81       	ld	r24, Z
    3318:	88 23       	and	r24, r24
    331a:	39 f7       	brne	.-50     	; 0x32ea <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	cf 91       	pop	r28
    3324:	df 91       	pop	r29
    3326:	08 95       	ret

00003328 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3328:	0f 93       	push	r16
    332a:	1f 93       	push	r17
    332c:	df 93       	push	r29
    332e:	cf 93       	push	r28
    3330:	00 d0       	rcall	.+0      	; 0x3332 <UART_receiveString+0xa>
    3332:	0f 92       	push	r0
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	9b 83       	std	Y+3, r25	; 0x03
    333a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    333c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	28 2f       	mov	r18, r24
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	8a 81       	ldd	r24, Y+2	; 0x02
    3346:	9b 81       	ldd	r25, Y+3	; 0x03
    3348:	8c 01       	movw	r16, r24
    334a:	02 0f       	add	r16, r18
    334c:	13 1f       	adc	r17, r19
    334e:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <UART_recieveByte>
    3352:	f8 01       	movw	r30, r16
    3354:	80 83       	st	Z, r24
    3356:	0f c0       	rjmp	.+30     	; 0x3376 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != 13)
	{
		i++;
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	8f 5f       	subi	r24, 0xFF	; 255
    335c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	28 2f       	mov	r18, r24
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	8a 81       	ldd	r24, Y+2	; 0x02
    3366:	9b 81       	ldd	r25, Y+3	; 0x03
    3368:	8c 01       	movw	r16, r24
    336a:	02 0f       	add	r16, r18
    336c:	13 1f       	adc	r17, r19
    336e:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <UART_recieveByte>
    3372:	f8 01       	movw	r30, r16
    3374:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != 13)
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	28 2f       	mov	r18, r24
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	9b 81       	ldd	r25, Y+3	; 0x03
    3380:	fc 01       	movw	r30, r24
    3382:	e2 0f       	add	r30, r18
    3384:	f3 1f       	adc	r31, r19
    3386:	80 81       	ld	r24, Z
    3388:	8d 30       	cpi	r24, 0x0D	; 13
    338a:	31 f7       	brne	.-52     	; 0x3358 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	28 2f       	mov	r18, r24
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	9b 81       	ldd	r25, Y+3	; 0x03
    3396:	fc 01       	movw	r30, r24
    3398:	e2 0f       	add	r30, r18
    339a:	f3 1f       	adc	r31, r19
    339c:	10 82       	st	Z, r1
}
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	cf 91       	pop	r28
    33a6:	df 91       	pop	r29
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	08 95       	ret

000033ae <__mulsi3>:
    33ae:	62 9f       	mul	r22, r18
    33b0:	d0 01       	movw	r26, r0
    33b2:	73 9f       	mul	r23, r19
    33b4:	f0 01       	movw	r30, r0
    33b6:	82 9f       	mul	r24, r18
    33b8:	e0 0d       	add	r30, r0
    33ba:	f1 1d       	adc	r31, r1
    33bc:	64 9f       	mul	r22, r20
    33be:	e0 0d       	add	r30, r0
    33c0:	f1 1d       	adc	r31, r1
    33c2:	92 9f       	mul	r25, r18
    33c4:	f0 0d       	add	r31, r0
    33c6:	83 9f       	mul	r24, r19
    33c8:	f0 0d       	add	r31, r0
    33ca:	74 9f       	mul	r23, r20
    33cc:	f0 0d       	add	r31, r0
    33ce:	65 9f       	mul	r22, r21
    33d0:	f0 0d       	add	r31, r0
    33d2:	99 27       	eor	r25, r25
    33d4:	72 9f       	mul	r23, r18
    33d6:	b0 0d       	add	r27, r0
    33d8:	e1 1d       	adc	r30, r1
    33da:	f9 1f       	adc	r31, r25
    33dc:	63 9f       	mul	r22, r19
    33de:	b0 0d       	add	r27, r0
    33e0:	e1 1d       	adc	r30, r1
    33e2:	f9 1f       	adc	r31, r25
    33e4:	bd 01       	movw	r22, r26
    33e6:	cf 01       	movw	r24, r30
    33e8:	11 24       	eor	r1, r1
    33ea:	08 95       	ret

000033ec <__udivmodsi4>:
    33ec:	a1 e2       	ldi	r26, 0x21	; 33
    33ee:	1a 2e       	mov	r1, r26
    33f0:	aa 1b       	sub	r26, r26
    33f2:	bb 1b       	sub	r27, r27
    33f4:	fd 01       	movw	r30, r26
    33f6:	0d c0       	rjmp	.+26     	; 0x3412 <__udivmodsi4_ep>

000033f8 <__udivmodsi4_loop>:
    33f8:	aa 1f       	adc	r26, r26
    33fa:	bb 1f       	adc	r27, r27
    33fc:	ee 1f       	adc	r30, r30
    33fe:	ff 1f       	adc	r31, r31
    3400:	a2 17       	cp	r26, r18
    3402:	b3 07       	cpc	r27, r19
    3404:	e4 07       	cpc	r30, r20
    3406:	f5 07       	cpc	r31, r21
    3408:	20 f0       	brcs	.+8      	; 0x3412 <__udivmodsi4_ep>
    340a:	a2 1b       	sub	r26, r18
    340c:	b3 0b       	sbc	r27, r19
    340e:	e4 0b       	sbc	r30, r20
    3410:	f5 0b       	sbc	r31, r21

00003412 <__udivmodsi4_ep>:
    3412:	66 1f       	adc	r22, r22
    3414:	77 1f       	adc	r23, r23
    3416:	88 1f       	adc	r24, r24
    3418:	99 1f       	adc	r25, r25
    341a:	1a 94       	dec	r1
    341c:	69 f7       	brne	.-38     	; 0x33f8 <__udivmodsi4_loop>
    341e:	60 95       	com	r22
    3420:	70 95       	com	r23
    3422:	80 95       	com	r24
    3424:	90 95       	com	r25
    3426:	9b 01       	movw	r18, r22
    3428:	ac 01       	movw	r20, r24
    342a:	bd 01       	movw	r22, r26
    342c:	cf 01       	movw	r24, r30
    342e:	08 95       	ret

00003430 <__prologue_saves__>:
    3430:	2f 92       	push	r2
    3432:	3f 92       	push	r3
    3434:	4f 92       	push	r4
    3436:	5f 92       	push	r5
    3438:	6f 92       	push	r6
    343a:	7f 92       	push	r7
    343c:	8f 92       	push	r8
    343e:	9f 92       	push	r9
    3440:	af 92       	push	r10
    3442:	bf 92       	push	r11
    3444:	cf 92       	push	r12
    3446:	df 92       	push	r13
    3448:	ef 92       	push	r14
    344a:	ff 92       	push	r15
    344c:	0f 93       	push	r16
    344e:	1f 93       	push	r17
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	ca 1b       	sub	r28, r26
    345a:	db 0b       	sbc	r29, r27
    345c:	0f b6       	in	r0, 0x3f	; 63
    345e:	f8 94       	cli
    3460:	de bf       	out	0x3e, r29	; 62
    3462:	0f be       	out	0x3f, r0	; 63
    3464:	cd bf       	out	0x3d, r28	; 61
    3466:	09 94       	ijmp

00003468 <__epilogue_restores__>:
    3468:	2a 88       	ldd	r2, Y+18	; 0x12
    346a:	39 88       	ldd	r3, Y+17	; 0x11
    346c:	48 88       	ldd	r4, Y+16	; 0x10
    346e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3470:	6e 84       	ldd	r6, Y+14	; 0x0e
    3472:	7d 84       	ldd	r7, Y+13	; 0x0d
    3474:	8c 84       	ldd	r8, Y+12	; 0x0c
    3476:	9b 84       	ldd	r9, Y+11	; 0x0b
    3478:	aa 84       	ldd	r10, Y+10	; 0x0a
    347a:	b9 84       	ldd	r11, Y+9	; 0x09
    347c:	c8 84       	ldd	r12, Y+8	; 0x08
    347e:	df 80       	ldd	r13, Y+7	; 0x07
    3480:	ee 80       	ldd	r14, Y+6	; 0x06
    3482:	fd 80       	ldd	r15, Y+5	; 0x05
    3484:	0c 81       	ldd	r16, Y+4	; 0x04
    3486:	1b 81       	ldd	r17, Y+3	; 0x03
    3488:	aa 81       	ldd	r26, Y+2	; 0x02
    348a:	b9 81       	ldd	r27, Y+1	; 0x01
    348c:	ce 0f       	add	r28, r30
    348e:	d1 1d       	adc	r29, r1
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	ed 01       	movw	r28, r26
    349c:	08 95       	ret

0000349e <_exit>:
    349e:	f8 94       	cli

000034a0 <__stop_program>:
    34a0:	ff cf       	rjmp	.-2      	; 0x34a0 <__stop_program>
